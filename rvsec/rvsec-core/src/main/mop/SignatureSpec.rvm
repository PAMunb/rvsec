package mop;

import java.security.Signature;
import java.security.cert.Certificate;
import br.unb.cic.mop.eh.*;
import br.unb.cic.mop.ExecutionContext;
SignatureSpec(Signature s) {

	List<String> algorithms = Arrays.asList("SHA256withRSA", "SHA256withECDSA", "SHA256withDSA", "SHA384withRSA", "SHA512withRSA", "SHA384withECDSA", "SHA512withECDSA");

	String currentAlgorithmInstance = "";

	Signature signature = null;
	event g1(String alg, Signature s){
		if ( ! (algorithms.contains(alg)) ) {
			return false;
		}
		{
			signature = s;
			currentAlgorithmInstance = alg;
		}
	}
	event g2(String alg, String provider, Signature s){
		if ( ! (algorithms.contains(alg)) ) {
			return false;
		}
		{
			signature = s;
			currentAlgorithmInstance = alg;
		}
	}
	event g3(String alg, Signature s){
		if ( ! (!algorithms.contains(alg)) ) {
			return false;
		}
		{
			currentAlgorithmInstance = alg;
		}
	}
	event i1(PrivateKey privateKey, Signature s){
		if (!algorithms.contains(currentAlgorithmInstance)) {
			ErrorCollector.instance().addError(new ErrorDescription(ErrorType.UnsafeAlgorithm, "SignatureSpec", "" + __LOC, "expecting one of " + String.join(",", algorithms) + " but found " + currentAlgorithmInstance + "."));
		}
	}
	event i2(PrivateKey privateKey, SecureRandom random, Signature s){
		if (!algorithms.contains(currentAlgorithmInstance)) {
			ErrorCollector.instance().addError(new ErrorDescription(ErrorType.UnsafeAlgorithm, "SignatureSpec", "" + __LOC, "expecting one of " + String.join(",", algorithms) + " but found " + currentAlgorithmInstance + "."));
		}
	}
	event i3(Certificate cert, Signature s){
		if (!algorithms.contains(currentAlgorithmInstance)) {
			ErrorCollector.instance().addError(new ErrorDescription(ErrorType.UnsafeAlgorithm, "SignatureSpec", "" + __LOC, "expecting one of " + String.join(",", algorithms) + " but found " + currentAlgorithmInstance + "."));
		}
	}
	event i4(PublicKey key, Signature s){
		if (!algorithms.contains(currentAlgorithmInstance)) {
			ErrorCollector.instance().addError(new ErrorDescription(ErrorType.UnsafeAlgorithm, "SignatureSpec", "" + __LOC, "expecting one of " + String.join(",", algorithms) + " but found " + currentAlgorithmInstance + "."));
		}
	}
	event update(Signature s){
	}
	event s1(Signature s, byte[] output){
		ExecutionContext.instance().setProperty(Property.SIGNED, output);
	}
	event s2(byte[] output, int offset, int len, Signature s){
		ExecutionContext.instance().setProperty(Property.SIGNED, output);
	}
	event v1(byte[] sign, Signature s, boolean signed){
		ExecutionContext.instance().setProperty(Property.VERIFIED, signed);
	}
	event v2(byte[] sign, int offset, int len, Signature s, boolean signed){
		ExecutionContext.instance().setProperty(Property.VERIFIED, signed);
	}
	ere:  (g1 | g2) ( ((i1 | i2)+ (update+ (s1 | s2)+)+)+ | ((i3 | i4)+ (update* (v1 | v2)+)+)+ )

	@fail
	{
		ErrorCollector.instance().addError(new ErrorDescription(ErrorType.InvalidSequenceOfMethodCalls, "SignatureSpec", "" + __LOC));
		__RESET;
	}
	@match
	{
		ExecutionContext.instance().setObjectAsInAcceptingState(signature);
	}
}
