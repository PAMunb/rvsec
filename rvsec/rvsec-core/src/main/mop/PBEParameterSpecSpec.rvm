package mop;

import javax.crypto.spec.PBEParameterSpec;
import java.security.spec.AlgorithmParameterSpec;
import br.unb.cic.mop.eh.*;
import br.unb.cic.mop.ExecutionContext;
PBEParameterSpecSpec(PBEParameterSpec s) {

	PBEParameterSpec spec;
	event c1(byte[] salt, int iterationCount, PBEParameterSpec s){
		if ( ! (iterationCount >= 10000 && ExecutionContext.instance().validate(Property.RANDOMIZED, salt)) ) {
			return false;
		}
		{
			spec = s;
		}
	}
	event c2(byte[] salt, int iterationCount, AlgorithmParameterSpec paramSpec, PBEParameterSpec s){
		if ( ! (iterationCount >= 10000 && ExecutionContext.instance().validate(Property.RANDOMIZED, salt)) ) {
			return false;
		}
		{
			spec = s;
		}
	}
	event c3(byte[] salt, int iterationCount, PBEParameterSpec s){
		if ( ! (iterationCount < 10000 || !(ExecutionContext.instance().validate(Property.RANDOMIZED, salt))) ) {
			return false;
		}
		{
			ErrorCollector.instance().addError(new ErrorDescription(ErrorType.UnsafeAlgorithm, "PBEParameterSpec", "" + __LOC, "expecting at least 1000 iterations and a randomized salt."));
		}
	}
	ere:  c1 | c2

	@fail
	{
		ErrorCollector.instance().addError(new ErrorDescription(ErrorType.InvalidSequenceOfMethodCalls, "PBEParameterSpec", "" + __LOC));
		__RESET;
	}
	@match
	{
		ExecutionContext.instance().setProperty(ExecutionContext.Property.PREPARED_PBE, spec);
		ExecutionContext.instance().setObjectAsInAcceptingState(spec);
	}
}
