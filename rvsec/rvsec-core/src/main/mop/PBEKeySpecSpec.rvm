package mop;

import javax.crypto.spec.PBEKeySpec;
import br.unb.cic.mop.eh.*;
import br.unb.cic.mop.ExecutionContext;
import br.unb.cic.mop.ExecutionContext.Property;
PBEKeySpecSpec(PBEKeySpec s) {

	PBEKeySpec spec;
	event f1(char[] password){
		ErrorCollector.instance().addError(new ErrorDescription(ErrorType.InvalidSequenceOfMethodCalls, "PBEKeySpecSpec", "" + __LOC));
	}
	event f2(char[] password, byte[] salt, int keyLength){
		ErrorCollector.instance().addError(new ErrorDescription(ErrorType.InvalidSequenceOfMethodCalls, "PBEKeySpecSpec", "" + __LOC));
	}
	event c1(char[] password, byte[] salt, int iterationCount, int keyLength, PBEKeySpec s){
		if ( ! (iterationCount >= 10000 && ExecutionContext.instance().validate(Property.RANDOMIZED, password) && ExecutionContext.instance().validate(Property.RANDOMIZED, salt)) ) {
			return false;
		}
		{
			spec = s;
			ExecutionContext.instance().setProperty(Property.SPECCED_KEY, spec);
		}
	}
	event err1(char[] password, byte[] salt, int iterationCount, int keyLength, PBEKeySpec s){
		if ( ! (iterationCount < 10000) ) {
			return false;
		}
		{
			ErrorCollector.instance().addError(new ErrorDescription(ErrorType.UnsatisfiedConstraint, "PBEKeySpec", "" + __LOC, "third argument should be >= 1000"));
		}
	}
	event err2(char[] password, byte[] salt, int iterationCount, int keyLength, PBEKeySpec s){
		if ( ! (!ExecutionContext.instance().validate(Property.RANDOMIZED, password)) ) {
			return false;
		}
		{
			ErrorCollector.instance().addError(new ErrorDescription(ErrorType.UnsatisfiedConstraint, "PBEKeySpec", "" + __LOC, "first argument should have been randomized"));
		}
	}
	event err3(char[] password, byte[] salt, int iterationCount, int keyLength, PBEKeySpec s){
		if ( ! (!ExecutionContext.instance().validate(Property.RANDOMIZED, salt)) ) {
			return false;
		}
		{
			ErrorCollector.instance().addError(new ErrorDescription(ErrorType.UnsatisfiedConstraint, "PBEKeySpec", "" + __LOC, "second argument should have been randomized"));
		}
	}
	event c2(PBEKeySpec s){
		ExecutionContext.instance().remove(Property.SPECCED_KEY, s);
	}
	ere:  c1 c2

	@fail
	{
		ErrorCollector.instance().addError(new ErrorDescription(ErrorType.InvalidSequenceOfMethodCalls, "PBEKeySpec", "" + __LOC));
		__RESET;
	}
	@match
	{
		ExecutionContext.instance().setObjectAsInAcceptingState(spec);
	}
}
