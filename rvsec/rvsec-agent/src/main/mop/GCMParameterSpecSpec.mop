package mop;

import javax.crypto.spec.GCMParameterSpec;

import br.unb.cic.mop.eh.*;
import br.unb.cic.mop.ExecutionContext;

/**
 * GCMParameterSpec
 *
 * A JavaMOP specification of the correct usage of the
 * javax.crypto.spec.GCMParameterSpec.
 *
 * @see https://github.com/CROSSINGTUD/Crypto-API-Rules/blob/master/JavaCryptographicArchitecture/src/GCMParameterSpec.crysl
 */
GCMParameterSpecSpec(GCMParameterSpec s) {

   GCMParameterSpec spec;

   List<Integer> validLengths = Arrays.asList(96, 104, 112, 120, 128);

   event c1 after(int tagLen, byte[] src) returning(GCMParameterSpec s):
    call(public GCMParameterSpec.new(int, byte[])) &&
    args(tagLen, src) &&
    condition(
      validLengths.contains(tagLen) &&
      ExecutionContext.instance().validate(Property.RANDOMIZED, src)
    )
    {
       spec = s;
    }

     event c1 after(int tagLen, byte[] src, int offset, int len) returning(GCMParameterSpec s):
      call(public GCMParameterSpec.new(int, byte[], int, int)) &&
      args(tagLen, src, offset, len) &&
      condition(
        validLengths.contains(tagLen) &&
        ExecutionContext.instance().validate(Property.RANDOMIZED, src) &&
        offset >= 0 &&
        len >= 0 &&
        src.length >= offset + len
      )
      {
         spec = s;
      }

   ere : c1 | c2

   @fail {
      ErrorCollector.instance().addError(new ErrorDescription(ErrorType.InvalidSequenceOfMethodCalls, "GCMParameterSpecSpec", "" + __LOC));
      __RESET;
   }

   @match {
      ExecutionContext.instance().setProperty(ExecutionContext.Property.PREPARED_GCM, spec);
      ExecutionContext.instance().setObjectAsInAcceptingState(spec);
   }

}