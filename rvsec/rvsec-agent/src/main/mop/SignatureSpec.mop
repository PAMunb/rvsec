package mop;

import java.security.Signature;
import java.security.cert.Certificate;

import br.unb.cic.mop.eh.*;
import br.unb.cic.mop.ExecutionContext;

/**
 * SignatureSpec
 *
 * A JavaMOP specification of the correct usage of the
 * java.security.Signature class.
 *
 * @see https://github.com/CROSSINGTUD/Crypto-API-Rules/blob/master/JavaCryptographicArchitecture/src/Signature.crysl
 */
SignatureSpec(Signature s) {

       List<String> algorithms = Arrays.asList("SHA256withRSA", "SHA256withECDSA", "SHA256withDSA",
            "SHA384withRSA", "SHA512withRSA", "SHA384withECDSA", "SHA512withECDSA");
       String currentAlgorithmInstance = "";

       Signature signature = null;

       event g1 after(String alg) returning(Signature s):
         call(public static Signature Signature.getInstance(String)) &&
         args(alg) &&
         condition(algorithms.contains(alg)) {
           signature = s;
           currentAlgorithmInstance = alg;
       }

       event g2 after(String alg, String provider) returning(Signature s):
         call(public static Signature Signature.getInstance(String, String)) &&
         args(alg, provider) &&
         condition(algorithms.contains(alg)) {
           signature = s;
           currentAlgorithmInstance = alg;
       }

       event g3 after(String alg) returning(Signature s):
         call(public static Signature Signature.getInstance(String)) &&
         args(alg) &&
         condition(!algorithms.contains(alg)) {
           currentAlgorithmInstance = alg;
       }

       event i1 before(PrivateKey privateKey, Signature s):
         call(public void Signature.initSign(PrivateKey)) &&
         args(privateKey) &&
         target(s) {
           if (!algorithms.contains(currentAlgorithmInstance)) {
              ErrorCollector.instance().addError(new ErrorDescription(ErrorType.UnsafeAlgorithm, "SignatureSpec", "" + __LOC,
               "expecting one of " + String.join(",", algorithms) + " but found " + currentAlgorithmInstance + "."));
           }
        }

       event i2 before(PrivateKey privateKey, SecureRandom random, Signature s):
         call(public void Signature.initSign(PrivateKey, SecureRandom)) &&
         args(privateKey, random) &&
         target(s) {
              if (!algorithms.contains(currentAlgorithmInstance)) {
               ErrorCollector.instance().addError(new ErrorDescription(ErrorType.UnsafeAlgorithm, "SignatureSpec", "" + __LOC,
                "expecting one of " + String.join(",", algorithms) + " but found " + currentAlgorithmInstance + "."));
        }
        }

       event i3 before(Certificate cert, Signature s):
         call(public void Signature.initVerify(Certificate)) &&
         args(cert) &&
         target(s) {
           if (!algorithms.contains(currentAlgorithmInstance)) {
               ErrorCollector.instance().addError(new ErrorDescription(ErrorType.UnsafeAlgorithm, "SignatureSpec", "" + __LOC,
                "expecting one of " + String.join(",", algorithms) + " but found " + currentAlgorithmInstance + "."));
        }
        }

       event i4 before(PublicKey key, Signature s):
         call(public void Signature.initVerify(PublicKey)) &&
         args(key) &&
         target(s) {
              if (!algorithms.contains(currentAlgorithmInstance)) {
               ErrorCollector.instance().addError(new ErrorDescription(ErrorType.UnsafeAlgorithm, "SignatureSpec", "" + __LOC,
                 "expecting one of " + String.join(",", algorithms) + " but found " + currentAlgorithmInstance + "."));
        }
        }

       event update before(Signature s):
         call(public void Signature.update(..)) &&
         target(s) {

        }

       event s1 after(Signature s) returning(byte[] output):
         call(public byte Signature.sign()) &&
         target(s) {
           ExecutionContext.instance().setProperty(Property.SIGNED, output);
       }


       event s2 after(byte[] output, int offset, int len, Signature s):
         call(public byte Signature.sign(byte[], int, int)) &&
         args(output, offset, len) &&
         target(s) {
           ExecutionContext.instance().setProperty(Property.SIGNED, output);
       }

       event v1 after(byte[] sign, Signature s) returning(boolean signed):
         call(public boolean Signature.verify(byte[])) &&
         args(sign) &&
         target(s) {
           ExecutionContext.instance().setProperty(Property.VERIFIED, signed);
       }


       event v2 after(byte[] sign, int offset, int len, Signature s) returning(boolean signed):
         call(public boolean Signature.verify(byte[], int, int)) &&
         args(sign, offset, len) &&
         target(s) {
            ExecutionContext.instance().setProperty(Property.VERIFIED, signed);
       }

       ere: (g1 | g2) ( ((i1 | i2)+ (update+ (s1 | s2)+)+)+ | ((i3 | i4)+ (update* (v1 | v2)+)+)+ )

       @fail {
          ErrorCollector.instance().addError(new ErrorDescription(ErrorType.InvalidSequenceOfMethodCalls, "SignatureSpec", "" + __LOC));
          __RESET;
       }

       @match {
          ExecutionContext.instance().setObjectAsInAcceptingState(signature);
       }


}