package mop;

import java.security.Provider;
import java.security.Key;
import javax.crypto.Cipher;
import java.security.SecureRandom;
import java.security.spec.AlgorithmParameterSpec;
import java.security.cert.Certificate;

import java.nio.ByteBuffer;

import br.unb.cic.mop.eh.*;
import br.unb.cic.mop.ExecutionContext;
import br.unb.cic.mop.Property;
import static br.unb.cic.mop.jca.util.CipherTransformationUtil.*;


/**
 * CipherSpec
 *
 * A JavaMOP specification of the correct usage of the
 * javax.crypto.Cipher class.
 *
 * @see https://github.com/CROSSINGTUD/Crypto-API-Rules/blob/master/JavaCryptographicArchitecture/src/Cipher.crysl
 */
CipherSpec(Cipher c) {

   Cipher cipher = null;
   String currentTransformation = "";

   event g1 after(String transformation) returning(Cipher c):
     call(public static Cipher Cipher.getInstance(String)) &&
     args(transformation) &&
     condition(isValid(transformation)) {
       currentTransformation = transformation;
       cipher = c;
   }

   event g2 after(String transformation, Object provider) returning(Cipher c):
      call(public static Cipher Cipher.getInstance(String, Object+)) &&
      args(transformation, provider) &&
      condition(isValid(transformation)) {
        currentTransformation = transformation;
        cipher = c;
   }


   event g3 after(String transformation) returning(Cipher c):
     call(public static Cipher Cipher.getInstance(String)) &&
     args(transformation) &&
     condition(!isValid(transformation)) {
        currentTransformation = transformation;
   }

   event i1 before(int mode, Certificate cert, Cipher c):
     call(public void Cipher.init(int, Certificate, ..)) &&
     args(mode, cert, ..) &&
     target(c) {
       if (!isValid(currentTransformation)) {
            ErrorCollector.instance().addError(new ErrorDescription(ErrorType.UnsafeAlgorithm, "CipherSpec", "" + __LOC,
        "expecting one of {AES/CBC/PKCS5Padding, AES/PCBC/ISO10126Padding, ...} but found " + currentTransformation + "."));
        }
    }

   event i2 before(int mode, Key key, Cipher c):
     call(public void Cipher.init(int, Key,..)) &&
     args(mode, key, ..) &&
     target(c) &&
     condition(
         ExecutionContext.instance().validate(Property.GENERATED_KEY, key)
      || ExecutionContext.instance().validate(Property.GENERATED_PUBLIC_KEY, key)
      || ExecutionContext.instance().validate(Property.GENERATED_PRIVATE_KEY, key)
     ){
        if (!isValid(currentTransformation)) {
        ErrorCollector.instance().addError(new ErrorDescription(ErrorType.UnsafeAlgorithm, "CipherSpec", "" + __LOC,
        "expecting one of {AES/CBC/PKCS5Padding, AES/PCBC/ISO10126Padding, ...} but found " + currentTransformation + "."));
        }
    }

   event u1 after (byte[] plainText, Cipher c) returning(byte[] cipherText):
     call(public byte[] Cipher.update(byte[])) &&
     args(plainText) &&
     target(c) {
        ExecutionContext.instance().setProperty(Property.ENCRYPTED, cipherText);
   }

   event u2 after (byte[] plainText, int prePlainTextOffset, int prePlainTextLen, Cipher c) returning(byte[] cipherText):
     call(public byte[] Cipher.update(byte[], int, int)) &&
     args(plainText, prePlainTextOffset, prePlainTextLen) &&
     target(c) {
        ExecutionContext.instance().setProperty(Property.ENCRYPTED, cipherText);
   }

   event u3 after (byte[] plainText, int prePlainTextOffset, int prePlainTextLen, byte[] cipherText, Cipher c):
     call(public int Cipher.update(byte[], int, int, byte[])) &&
     args(plainText, prePlainTextOffset, prePlainTextLen, cipherText) &&
     target(c) {
       ExecutionContext.instance().setProperty(Property.ENCRYPTED, cipherText);
   }

   event u4 after (byte[] plainText, int prePlainTextOffset, int prePlainTextLen, byte[] cipherText, int outputOffset, Cipher c):
     call(public int Cipher.update(byte[], int, int, byte[], int)) &&
     args(plainText, prePlainTextOffset, prePlainTextLen, cipherText, outputOffset) &&
     target(c) {
       ExecutionContext.instance().setProperty(Property.ENCRYPTED, cipherText);
   }

   event u5 after (ByteBuffer plainBuffer, ByteBuffer cipherBuffer, Cipher c):
     call(public int Cipher.update(ByteBuffer, ByteBuffer)) &&
     args(plainBuffer, cipherBuffer) &&
     target(c) {
       ExecutionContext.instance().setProperty(Property.ENCRYPTED, cipherBuffer);
   }

   event wkb1 after(Cipher c) returning(byte[] wrappedKeyBytes):
     call(byte[] Cipher.wrap(Key)) &&
     target(c) {
        ExecutionContext.instance().setProperty(Property.WRAPPED_KEY, wrappedKeyBytes);
   }

   event f1 after(Cipher c) returning(byte[] cipherText):
     call(public byte[] Cipher.doFinal()) &&
     target(c) {
      ExecutionContext.instance().setProperty(Property.ENCRYPTED, cipherText);
   }

   event f2 after(Cipher c) returning(byte[] cipherText):
     call(public byte[] Cipher.doFinal(..)) &&
     target(c) {
       ExecutionContext.instance().setProperty(Property.ENCRYPTED, cipherText);
   }

   event f3 after(byte[] cipherText, int offset, Cipher c):
     call(public int Cipher.doFinal(byte[], int)) &&
     args(cipherText, offset) &&
     target(c) {
       ExecutionContext.instance().setProperty(Property.ENCRYPTED, cipherText);
   }

    event f5 after(byte[] plainText, int offset, int len, byte[] cipherText, Cipher c):
      call(public int Cipher.doFinal(byte[], int, int, byte[])) &&
      args(plainText, offset, len, cipherText) &&
      target(c) {
         ExecutionContext.instance().setProperty(Property.ENCRYPTED, cipherText);
    }

    event f6 after(byte[] plainText, int offset, int len, byte[] cipherText, int cipherOffset, Cipher c):
      call(public int Cipher.doFinal(byte[], int, int, byte[], int)) &&
      args(plainText, offset, len, cipherText, cipherOffset) &&
      target(c) {
        ExecutionContext.instance().setProperty(Property.ENCRYPTED, cipherText);
    }

    event f7 after(ByteBuffer plainTextBuffer, ByteBuffer cipherTextBuffer, Cipher c):
       call(public int Cipher.doFinal(ByteBuffer, ByteBuffer)) &&
       args(plainTextBuffer, cipherTextBuffer) &&
       target(c) {
         ExecutionContext.instance().setProperty(Property.ENCRYPTED, cipherTextBuffer);
    }

   fsm :
     start [
        g3 -> unsafeAlg
        g1 -> s1
        g2 -> s1
     ]
     unsafeAlg [
        g3 -> unsafeAlg
        g1 -> s1
        g2 -> s1
     ]
     s1 [
       i1 -> s2
       i2 -> s2
     ]
     s2 [
       wkb1 -> end
       f2   -> end
       f5   -> end
       f6   -> end
       f7   -> end
       u1   -> s3
       u2   -> s3
       u3   -> s3
       u4   -> s3
       u5   -> s3
     ]
     s3 [
       f1 -> end
       f2 -> end
       f3 -> end
       f5 -> end
       f6 -> end
       f7 -> end
     ]
     end [
        wkb1 -> end
        f2   -> end
        f5   -> end
        f6   -> end
        f7   -> end
        u1   -> s3
        u2   -> s3
        u3   -> s3
        u4   -> s3
        u5   -> s3
     ]

   alias match1 = end

   @fail {
        ErrorCollector.instance().addError(new ErrorDescription(ErrorType.InvalidSequenceOfMethodCalls, "CipherSpec", "" + __LOC));
	    __RESET;
   }

   @match1 {
        ExecutionContext.instance().setObjectAsInAcceptingState(cipher);
   }
}