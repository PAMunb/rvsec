package mop;

import javax.net.ssl.KeyManagerFactory;
import javax.net.ssl.ManagerFactoryParameters;
import javax.net.ssl.KeyManager;
import java.security.KeyStore;
import br.unb.cic.mop.eh.*;
import br.unb.cic.mop.ExecutionContext;
KeyManagerFactorySpec(KeyManagerFactory k) {

	List<String> safeAlgorithms = Arrays.asList("PKIX", "SunX509");

	String currentAlgorithmInstance = "";

	KeyManagerFactory keyManagerFactory = null;
	event g1(String alg, KeyManagerFactory k){
		if ( ! (safeAlgorithms.contains(alg)) ) {
			return false;
		}
		{
			keyManagerFactory = k;
			currentAlgorithmInstance = alg;
		}
	}
	event g2(String alg, KeyManagerFactory k){
		if ( ! (safeAlgorithms.contains(alg)) ) {
			return false;
		}
		{
			keyManagerFactory = k;
			currentAlgorithmInstance = alg;
		}
	}
	event g3(String alg, KeyManagerFactory k){
		if ( ! (!safeAlgorithms.contains(alg)) ) {
			return false;
		}
		{
			currentAlgorithmInstance = alg;
		}
	}
	event init(KeyManagerFactory k){
		if (safeAlgorithms.contains(currentAlgorithmInstance)) {
			ErrorCollector.instance().addError(new ErrorDescription(ErrorType.UnsafeAlgorithm, "KeyManagerFactorySpec", "" + __LOC, " expecting one of " + String.join(",", safeAlgorithms) + " but found " + currentAlgorithmInstance + "."));
		}
		ExecutionContext.instance().setProperty(ExecutionContext.Property.GENERATED_KEY_MANAGERS, keyManagerFactory);
	}
	event gkm1(KeyManagerFactory k, KeyManager[] keyManager){
		ExecutionContext.instance().setProperty(Property.GENERATED_KEY_MANAGERS, keyManager);
	}
	fsm:
	start [
	g3 -> unsafeAlg
	g1 -> waitingInit
	g2 -> waitingInit
	]
	unsafeAlg [
	g3 -> unsafeAlg
	g1 -> waitingInit
	g2 -> waitingInit
	]
	waitingInit [
	init -> final
	]
	final [
	g1   -> waitingInit
	g2   -> waitingInit
	gkm1 -> start
	]

	alias match1 = final

	@fail
	{
		ErrorCollector.instance().addError(new ErrorDescription(ErrorType.InvalidSequenceOfMethodCalls, "KeyManagerFactorySpec", "" + __LOC));
		ExecutionContext.instance().unsetObjectAsInAcceptingState(keyManagerFactory);
		ExecutionContext.instance().remove(Property.GENERATED_KEY_MANAGERS);
		__RESET;
	}
	@match1
	{
		ExecutionContext.instance().setObjectAsInAcceptingState(keyManagerFactory);
	}
}
