package mop;

import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import java.security.SecureRandom;
import java.security.spec.AlgorithmParameterSpec;
import br.unb.cic.mop.eh.*;
import br.unb.cic.mop.ExecutionContext;
KeyGeneratorSpec(KeyGenerator k) {

	List<String> safeAlgorithms = Arrays.asList("AES", "HmacSHA256", "HmacSHA384", "HmacSHA512");

	String currentAlgorithmInstance = "";

	KeyGenerator keyGenerator = null;

	Key generatedKey;
	event g1(String alg, KeyGenerator k){
		if ( ! (safeAlgorithms.contains(alg)) ) {
			return false;
		}
		{
			keyGenerator = k;
			currentAlgorithmInstance = alg;
		}
	}
	event g2(String alg, Object provider, KeyGenerator k){
		if ( ! (safeAlgorithms.contains(alg)) ) {
			return false;
		}
		{
			keyGenerator = k;
			currentAlgorithmInstance = alg;
		}
	}
	event g3(String alg, KeyGenerator k){
		if ( ! (!safeAlgorithms.contains(currentAlgorithmInstance)) ) {
			return false;
		}
		{
			currentAlgorithmInstance = alg;
		}
	}
	event init(KeyGenerator k){
	}
	event gk1(KeyGenerator k, SecretKey key){
		if (!safeAlgorithms.contains(currentAlgorithmInstance)) {
			ErrorCollector.instance().addError(new ErrorDescription(ErrorType.UnsafeAlgorithm, "KeyGeneratorSpec", "" + __LOC, "expecting one of" + String.join(",", safeAlgorithms) + " but found " + currentAlgorithmInstance + "."));
		}
		generatedKey = key;
		ExecutionContext.instance().setProperty(ExecutionContext.Property.GENERATED_KEY, generatedKey);
	}
	ere:  (g3* g1+ | g3* g2+) ((init gk1) | gk1)

	@fail
	{
		ErrorCollector.instance().addError(new ErrorDescription(ErrorType.InvalidSequenceOfMethodCalls, "KeyGeneratorSpec", "" + __LOC));
		ExecutionContext.instance().unsetObjectAsInAcceptingState(keyGenerator);
		ExecutionContext.instance().remove(ExecutionContext.Property.GENERATED_KEY, generatedKey);
		__RESET;
	}
	@match
	{
		ExecutionContext.instance().setObjectAsInAcceptingState(keyGenerator);
	}
}
