package mop;

import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLEngine;
import javax.net.ssl.KeyManager;
import javax.net.ssl.TrustManager;
import br.unb.cic.mop.eh.*;
import br.unb.cic.mop.ExecutionContext;
SSLContextSpec(SSLContext ctx) {

	List<String> protocols = Arrays.asList("TLSV1.2", "TLSV1.3");

	String currentProtocol = "";

	SSLContext context;

	SSLEngine engine;
	event g1(String protocol, SSLContext ctx){
		if ( ! (protocols.contains(protocol.toUpperCase())) ) {
			return false;
		}
		{
			context = ctx;
			currentProtocol = protocol;
		}
	}
	event g2(String protocol, String provider, SSLContext ctx){
		if ( ! (protocols.contains(protocol.toUpperCase())) ) {
			return false;
		}
		{
			context = ctx;
			currentProtocol = protocol;
		}
	}
	event unsafe_protocol(String protocol){
		if ( ! (!protocols.contains(protocol.toUpperCase())) ) {
			return false;
		}
		{
			currentProtocol = protocol;
		}
	}
	event init(SSLContext ctx){
		if (!protocols.contains(currentProtocol.toUpperCase())) {
			ErrorCollector.instance().addError(new ErrorDescription(ErrorType.UnsafeProtocol, "SSLContextSpec", "" + __LOC, "expecting one of {TLSv1.2, TLSv1.3} but found " + currentProtocol + "."));
		}
		ExecutionContext.instance().setProperty(Property.GENERATE_SSL_CONTEXT, context);
	}
	event engine(SSLContext ctx, SSLEngine eng){
		ExecutionContext.instance().setProperty(Property.GENERATE_SSL_ENGINE, eng);
	}
	fsm:
	start [
	g1 -> s1
	g2 -> s1
	]
	s1 [
	init -> end
	]
	end [
	engine -> end
	]

	alias match1 = end

	@fail
	{
		ErrorCollector.instance().addError(new ErrorDescription(ErrorType.InvalidSequenceOfMethodCalls, "SSLContextSpec", "" + __LOC));
		ExecutionContext.instance().unsetObjectAsInAcceptingState(context);
		__RESET;
	}
	@match1
	{
		ExecutionContext.instance().setObjectAsInAcceptingState(context);
	}
}
