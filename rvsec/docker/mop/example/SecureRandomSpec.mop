package mop;

import java.security.SecureRandom;
import java.util.stream.IntStream;

import br.unb.cic.mop.eh.*;
import br.unb.cic.mop.ExecutionContext;

/**
 * SecureRandomSpec
 *
 * A JavaMOP specification of the correct usage of the
 * java.security.SecureRandom class.
 *
 * @see https://github.com/CROSSINGTUD/Crypto-API-Rules/blob/master/JavaCryptographicArchitecture/src/SecureRandom.crysl
 */
SecureRandomSpec(SecureRandom r) {

    SecureRandom sr;

    // the expected algorithms for SecureRandom
    List<String> algorithms = Arrays.asList("SHA1PRNG", "Windows-PRNG", "NativePRNG",
        "NativePRNGBlocking", "NativePRNGNonBlocking", "PKCS11");

    // this event captures the following event in the original CrySL specification.
    //  - c1: SecureRandom();
    event c1 after() returning(SecureRandom r):
      call(public SecureRandom.new()) {
        sr = r;
    }

    // this event captures the following event in the original CrySL specification.
    // - c2: SecureRandom(byte[]);
    event c2 after(byte[] seed) returning(SecureRandom r):
      call(public SecureRandom.new(byte[])) &&
      args(seed) &&
      condition(ExecutionContext.instance().validate(Property.RANDOMIZED, seed)) {
         sr = r;
    }


    event c3 after(byte[] seed) returning(SecureRandom r):
      call(public SecureRandom.new(byte[])) &&
      args(seed) &&
      condition(!ExecutionContext.instance().validate(Property.RANDOMIZED, seed)) {
        sr = r;
    }


    // this event captures the following event in the original CrySL specification.
    //  - g1: getInstance(algorithm);
    event g1 after(String alg) returning(SecureRandom r):
      call(public static SecureRandom SecureRandom.getInstance(String))
      && args(alg)
      && condition(algorithms.contains(alg)) {
       sr = r;
    }

    // this event captures the following event in the original CrySL specification.
    //  - g2: getInstance(algorithm, provider);
    event g2 after(String alg) returning(SecureRandom r):
      call(public static SecureRandom SecureRandom.getInstance(String, ..))
      && args(alg, *)
      && condition(algorithms.contains(alg)) {
       sr = r;
    }

    // CrySL gI: getInstanceStrong() event
    event g3 after() returning(SecureRandom r):
      call(public static SecureRandom SecureRandom.getInstanceStrong()) {
      sr = r;
    }

    // getInstance with an invalid algorithm.
    event g4 after(String alg) returning(SecureRandom r):
      call(public static SecureRandom SecureRandom.getInstance(String, ..))
      && args(alg)
      && condition(!algorithms.contains(alg))
    {
        ErrorCollector.instance().addError(new ErrorDescription(ErrorType.UnsafeAlgorithm, "SecureRandomSpec", "" + __LOC,
         "one of " + String.join(",", algorithms) + " but found " + alg + "."));
    }

    event setSeed1 after(SecureRandom r):
      call(public void SecureRandom.setSeed(long)) &&
      target(r) {  }

    event setSeed2 after(byte[] seed, SecureRandom r):
      call(public void SecureRandom.setSeed(byte[]))  &&
      args(seed) &&
      target(r) &&
      condition(ExecutionContext.instance().validate(Property.RANDOMIZED, seed)) {  }

    event setSeed3 after(byte[] seed, SecureRandom r):
      call(public void SecureRandom.setSeed(byte[]))  &&
      args(seed) &&
      target(r) &&
      condition(!ExecutionContext.instance().validate(Property.RANDOMIZED, seed)) {
        ErrorCollector.instance().addError(new ErrorDescription(ErrorType.UnsatisfiedConstraint, "SecureRandomSpec",
        "setSeed() expects a randomized byte array." + __LOC));
    }

    event genSeed after(SecureRandom r) returning(byte[] seed):
      call(public byte[] SecureRandom.generateSeed(int))
      && target(r) {
        ExecutionContext.instance().setProperty(Property.RANDOMIZED, seed);
    }

    event next1 before(SecureRandom r, int randIntInRange):
      call(public int SecureRandom.nextInt(int))
      && args(randIntInRange)
      && target(r) {
         ExecutionContext.instance().setProperty(Property.RANDOMIZED, randIntInRange);
    }

    event next2 before(SecureRandom r, byte[] bytes):
      call(public void SecureRandom.nextBytes(byte[]))
      && args(bytes)
      && target(r) {
         ExecutionContext.instance().setProperty(Property.RANDOMIZED, bytes);
    }

    event next3 after(SecureRandom r) returning(int randInt) :
      call(public int SecureRandom.nextInt())
      && target(r) {
         ExecutionContext.instance().setProperty(Property.RANDOMIZED, randInt);
    }

     event ints after(SecureRandom r) returning(IntStream stream):
       call(public IntStream SecureRandom.ints(..))
       && target(r) {
          ExecutionContext.instance().setProperty(Property.RANDOMIZED, stream);
     }

    fsm :
      start [
         c1 -> init
         c2 -> init
         g1 -> init
         g2 -> init
         g3 -> init
      ]
      init [
         c1       -> init
         genSeed  -> end
         setSeed1 -> end
         setSeed2 -> end
         next1    -> end
         next2    -> end
         next3    -> end
         ints     -> end
      ]
      end [
         genSeed  -> end
         setSeed1 -> end
         setSeed2 -> end
         next1    -> end
         next3    -> end
         ints     -> end
      ]

    alias match1 = init

    @fail {
      ErrorCollector.instance().addError(new ErrorDescription(ErrorType.InvalidSequenceOfMethodCalls, "SecureRandomSpec", "" + __LOC));
      __RESET;
    }

    @match1 {
        ExecutionContext.instance().setObjectAsInAcceptingState(sr);
        ExecutionContext.instance().setProperty(Property.RANDOMIZED, sr);
    }
}