package mop;

import javax.crypto.spec.SecretKeySpec;
import br.unb.cic.mop.eh.*;
import br.unb.cic.mop.ExecutionContext;
SecretKeySpecSpec(SecretKeySpec secretKeySpec) {

	List<String> algorithms = Arrays.asList("AES", "HMACSHA256", "HMACSHA384", "HMACSHA512");

	SecretKeySpec spec;
	event c1(byte[] keyMaterial, String keyAlgorithm, SecretKeySpec secretKeySpec){
		if ( ! (algorithms.contains(keyAlgorithm.toUpperCase()) && ExecutionContext.instance().validate(ExecutionContext.Property.RANDOMIZED, keyMaterial)) ) {
			return false;
		}
		{
			spec = secretKeySpec;
		}
	}
	event c2(byte[] keyMaterial, int offset, int len, String keyAlgorithm, SecretKeySpec secretKeySpec){
		if ( ! (algorithms.contains(keyAlgorithm.toUpperCase()) && keyMaterial.length >= offset + len) ) {
			return false;
		}
		{
			spec = secretKeySpec;
		}
	}
	event c3(byte[] keyMaterial, String keyAlgorithm, SecretKeySpec secretKeySpec){
		if ( ! (!(algorithms.contains(keyAlgorithm.toUpperCase()) && ExecutionContext.instance().validate(ExecutionContext.Property.RANDOMIZED, keyMaterial))) ) {
			return false;
		}
		{
			ErrorCollector.instance().addError(new ErrorDescription(ErrorType.UnsatisfiedConstraint, "SecretKeySpecSpec", "" + __LOC, " Using either an invalid algorithm or keyMaterial.length is not randomized."));
		}
	}
	event c4(byte[] keyMaterial, int offset, int len, String keyAlgorithm, SecretKeySpec secretKeySpec){
		if ( ! (!algorithms.contains(keyAlgorithm.toUpperCase()) || keyMaterial.length < offset + len) ) {
			return false;
		}
		{
			ErrorCollector.instance().addError(new ErrorDescription(ErrorType.UnsatisfiedConstraint, "SecretKeySpecSpec", "" + __LOC, " Using either an invalid algorithm or keyMaterial.length < offset + len "));
		}
	}
	ere:  c1 | c2

	@fail
	{
		ErrorCollector.instance().addError(new ErrorDescription(ErrorType.InvalidSequenceOfMethodCalls, "SecretKeySpecSpec", "" + __LOC));
		__RESET;
	}
	@match
	{
		ExecutionContext.instance().setObjectAsInAcceptingState(spec);
		ExecutionContext.instance().setProperty(ExecutionContext.Property.GENERATED_KEY, spec);
	}
}
