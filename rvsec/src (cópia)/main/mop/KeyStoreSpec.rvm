package mop;

import java.security.KeyStore;
import java.io.InputStream;
import java.security.KeyStore.ProtectionParameter;
import java.security.KeyStore.Entry;
KeyStoreSpec(KeyStore ks) {

	List<String> types = Arrays.asList("JCEKS", "JKS", "DKS", "PKCS11", "PKCS12");

	String currentKSType = "";

	KeyStore keyStore = null;

	Key generatedKey = null;
	event g1(String ksType, KeyStore k){
		if ( ! (types.contains(ksType)) ) {
			return false;
		}
		{
			keyStore = k;
			currentKSType = ksType;
		}
	}
	event g2(String ksType, KeyStore k){
		if ( ! (!types.contains(ksType)) ) {
			return false;
		}
		{
			currentKSType = ksType;
		}
	}
	event load(KeyStore k){
		ExecutionContext.instance().setProperty(ExecutionContext.Property.GENERATED_KEY_STORE, keyStore);
	}
	event store(KeyStore k){
	}
	event ge1(KeyStore k){
	}
	event se1(KeyStore k){
	}
	event gk1(KeyStore k, Key key){
		if (!types.contains(currentKSType)) {
			ErrorCollector.instance().addError(new ErrorDescription(ErrorType.InvalidKeyStoreType, "KeyStoreSpec", "" + __LOC, "expecting one of" + String.join(",", types) + " but found " + currentKSType + "."));
		}
		generatedKey = key;
		ExecutionContext.instance().setProperty(ExecutionContext.Property.GENERATED_KEY, generatedKey);
	}
	ere:  (g2* g1 load (((ge1 gk1) | gk1) | (se1 store))*)+

	@fail
	{
		ErrorCollector.instance().addError(new ErrorDescription(ErrorType.InvalidSequenceOfMethodCalls, "KeyStoreSpec", "" + __LOC));
		ExecutionContext.instance().unsetObjectAsInAcceptingState(keyStore);
		ExecutionContext.instance().remove(Property.GENERATED_KEY, generatedKey);
		ExecutionContext.instance().remove(Property.GENERATED_KEY_STORE, keyStore);
		__RESET;
	}
	@match
	{
		ExecutionContext.instance().setObjectAsInAcceptingState(keyStore);
	}
}
