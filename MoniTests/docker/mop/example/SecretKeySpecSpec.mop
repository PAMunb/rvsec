package mop;

import javax.crypto.spec.SecretKeySpec;

import br.unb.cic.mop.eh.*;
import br.unb.cic.mop.ExecutionContext;

/**
 * SecretKeySpec
 *
 * A JavaMOP specification of the correct usage of the
 * javax.crypto.spec.SecretKeySpec.
 *
 * @see https://github.com/CROSSINGTUD/Crypto-API-Rules/blob/master/JavaCryptographicArchitecture/src/SecretKeySpec.crysl
 */
SecretKeySpecSpec(SecretKeySpec secretKeySpec) {

   List<String> algorithms = Arrays.asList("AES", "HMACSHA256", "HMACSHA384", "HMACSHA512");

   SecretKeySpec spec;

   event c1 after(byte[] keyMaterial, String keyAlgorithm) returning(SecretKeySpec s):
    call(public SecretKeySpec.new(byte[], String))
    && args(keyMaterial, keyAlgorithm)
    && condition(
      algorithms.contains(keyAlgorithm.toUpperCase()) &&
      ExecutionContext.instance().validate(ExecutionContext.Property.RANDOMIZED, keyMaterial))
    ) {
      spec = s;
    }

   event c2 after(byte[] keyMaterial, int offset, int len, String keyAlgorithm) returning(SecretKeySpec s):
    call(public SecretKeySpec.new(byte[], int, int, String))
    && args(keyMaterial, offset, len, keyAlgorithm)
    && condition(algorithms.contains(keyAlgorithm.toUpperCase()) && keyMaterial.length >= offset + len) {
         spec = s;
    }

    event c3 after(byte[] keyMaterial, String keyAlgorithm) returning(SecretKeySpec s):
      call(public SecretKeySpec.new(byte[], String))
      && args(keyMaterial, keyAlgorithm)
      && condition(
         !(algorithms.contains(keyAlgorithm.toUpperCase()) &&
          ExecutionContext.instance().validate(ExecutionContext.Property.RANDOMIZED, keyMaterial))
      ) {
      ErrorCollector.instance().addError(new ErrorDescription(ErrorType.UnsatisfiedConstraint, "SecretKeySpecSpec", "" + __LOC,
                                  " Using either an invalid algorithm or keyMaterial.length is not randomized."));
    }
   event c4 after(byte[] keyMaterial, int offset, int len, String keyAlgorithm) returning(SecretKeySpec s):
       call(public SecretKeySpec.new(byte[], int, int, String))
       && args(keyMaterial, offset, len, keyAlgorithm)
       && condition(!algorithms.contains(keyAlgorithm.toUpperCase()) || keyMaterial.length < offset + len) {
            ErrorCollector.instance().addError(new ErrorDescription(ErrorType.UnsatisfiedConstraint, "SecretKeySpecSpec", "" + __LOC,
                            " Using either an invalid algorithm or keyMaterial.length < offset + len "));
       }

   ere : c1 | c2

   @fail {
      ErrorCollector.instance().addError(new ErrorDescription(ErrorType.InvalidSequenceOfMethodCalls, "SecretKeySpecSpec", "" + __LOC));
      __RESET;
   }

   @match {
      ExecutionContext.instance().setObjectAsInAcceptingState(spec);
      ExecutionContext.instance().setProperty(ExecutionContext.Property.GENERATED_KEY, spec);
   }

}