package mop;

import javax.crypto.spec.IvParameterSpec;

import br.unb.cic.mop.eh.*;
import br.unb.cic.mop.ExecutionContext;

/**
 * IvParameterSpec
 *
 * A JavaMOP specification of the correct usage of the
 * javax.crypto.spec.IvParameterSpec.
 *
 * @see https://github.com/CROSSINGTUD/Crypto-API-Rules/blob/master/JavaCryptographicArchitecture/src/IvParameterSpec.crysl
 */
IvParameterSpecSpec(IvParameterSpec s) {

        IvParameterSpec spec;

        event c1 after(byte[] iv) returning(IvParameterSpec s):
          call(public IvParameterSpec.new(byte[])) &&
          args(iv) &&
          condition(
            ExecutionContext.instance().validate(Property.RANDOMIZED, iv)
          ) {
             spec = s;
        }

        event c2 after(byte[] iv, int offset, int len) returning(IvParameterSpec s):
          call(public IvParameterSpec.new(byte[], int, int)) &&
          args(iv, offset, len) &&
          condition(
            ExecutionContext.instance().validate(Property.RANDOMIZED, iv) &&
            offset >= 0 &&
            len >= 0 &&
            iv.length >= offset + len
        ) {
            spec = s;
        }

        event c3 after(byte[] iv) returning(IvParameterSpec s):
           call(public IvParameterSpec.new(byte[])) &&
           args(iv) &&
           condition(
             !ExecutionContext.instance().validate(Property.RANDOMIZED, iv)
           ) {
           ErrorCollector.instance().addError(new ErrorDescription(ErrorType.UnsatisfiedConstraint, "IvParameterSpecSpec", "" + __LOC));
        }

        ere : c1 | c2

        @fail {
          ErrorCollector.instance().addError(new ErrorDescription(ErrorType.InvalidSequenceOfMethodCalls, "IvParameterSpecSpec", "" + __LOC));
          __RESET;
        }

        @match {
          ExecutionContext.instance().setProperty(ExecutionContext.Property.PREPARED_IV, spec);
          ExecutionContext.instance().setObjectAsInAcceptingState(spec);
        }

}