package mop;

import java.security.KeyPair;
import java.security.PrivateKey;
import java.security.PublicKey;

import br.unb.cic.mop.eh.*;
import br.unb.cic.mop.ExecutionContext;

/**
 * KeyPairSpec
 *
 * A JavaMOP specification of the correct usage of the
 * java.security.KeyPair class.
 *
 * @see https://github.com/CROSSINGTUD/Crypto-API-Rules/blob/master/JavaCryptographicArchitecture/src/KeyPair.crysl
 */
KeyPairSpec(KeyPair keyPair) {

    KeyPair keyPair = null;

    event c1 after(PublicKey publicKey, PrivateKey privateKey) returning(KeyPair kp):
      call(public KeyPair.new(PublicKey, PrivateKey))
      && args(publicKey, privateKey) {
        keyPair = kp;
    }

    event gpu after(KeyPair keyPair) returning(PublicKey publicKey):
      call(public PublicKey KeyPair.getPublic()) &&
      target(keyPair) {
        ExecutionContext.instance().setProperty(ExecutionContext.Property.GENERATED_PUBLIC_KEY, publicKey);
    }

    event gpr after(KeyPair keyPair) returning(PrivateKey privateKey):
      call(public PrivateKey KeyPair.getPrivate()) &&
      target(keyPair) {
        ExecutionContext.instance().setProperty(ExecutionContext.Property.GENERATED_PUBLIC_KEY, privateKey);
    }

    ere: c1 (gpu | gpr)*

    @fail {
       ErrorCollector.instance().addError(new ErrorDescription(ErrorType.InvalidSequenceOfMethodCalls, "KeyPairSpec", "" + __LOC));
       __RESET;
    }

    @match {
        ExecutionContext.instance().setObjectAsInAcceptingState(keyPair);
    }


}