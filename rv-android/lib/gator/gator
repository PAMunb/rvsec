#!/usr/bin/env python3

import argparse
import glob
import os
import sys
from subprocess import call, TimeoutExpired

from pygator.unpacker import decode_res_from_apk
from pygator.utils import remove_temp_dirs, extract_target_api

gator_dir = os.path.dirname(os.path.realpath(__file__))


def path_exists(path_name):
    if os.access(path_name, os.F_OK):
        return True
    return False


def extract_libs_from_path(path_name):
    if not path_exists(path_name):
        return ""
        pass
    file_list = glob.glob(path_name + "/*.jar")
    if len(file_list) == 0:
        return ""
    ret = ""
    for item in file_list:
        ret += ':' + item
    return ret[1:]


def find_best_google_api(sdk_path, api_level):
    google_api_lib_dirs = glob.glob(sdk_path + "/add-ons/addon-google_apis-google-*")
    available_levels = []
    for item in google_api_lib_dirs:
        id = item.rfind('-')
        digits = int(item[id + 1:])
        available_levels.append(digits)
    available_levels.sort(reverse=True)
    if len(available_levels) == 0:
        return 0
    if api_level not in available_levels:
        api_level = available_levels[0]
    return sdk_path + "/add-ons/addon-google_apis-google-" + str(api_level)


def analyze(args, unknown):
    # jar = os.path.join(gator_dir, 'sootandroid', 'build', 'libs', 'sootandroid-1.0-SNAPSHOT-all.jar')    
    # jar = os.path.join(gator_dir, 'sootandroid', 'target', 'rvsec-gator-jar-with-dependencies.jar')
    jar = os.path.join(gator_dir, 'rvsec-gator-jar-with-dependencies.jar')
    if not os.path.exists(jar):
        print('...... please build GATOR first.')
        exit(-1)

    if args.classpath != '':        
        jar = "{}:{}".format(jar, args.classpath)
    print("...... classpath: {}".format(jar))

    sdk_path = args.sdkpath
    if not sdk_path: 
        sdk_path = os.environ['ANDROID_SDK_HOME']
        # args.sdkpath = os.environ['ANDROID_SDK']
    print('...... Android SDK path: %s' % sdk_path)

    apktool_dir = decode_res_from_apk(args.apkpath)
    print('...... resource decoded to %s' % apktool_dir)

    target_level = get_target_level(args, apktool_dir)
    print('...... target level: {}'.format(target_level))

    # sootandroid_dir = os.path.join(gator_dir, 'sootandroid')
    # os.path.join(gator_dir, os.path.abspath('..'))
    cmd = ['java', '-Xmx12G', '-cp', jar, 'presto.android.Main',
           '-sootandroidDir', gator_dir,
           '-sdkDir', sdk_path,
           '-listenerSpecFile', os.path.join(gator_dir, 'listeners.xml'),
           '-wtgSpecFile', os.path.join(gator_dir, 'wtg.xml'),
           '-libraryPackageListFile', os.path.join(gator_dir, 'libPackages.txt'),
           '-resourcePath', os.path.join(apktool_dir, 'res'),
           '-manifestFile', os.path.join(apktool_dir, 'AndroidManifest.xml'),
           '-project', args.apkpath,
           '-apiLevel', 'android-%s' % target_level,
           '-guiAnalysis',
           '-benchmarkName', args.apkpath.split('/')[-1]
           ]
    
    android_jar = os.path.join(sdk_path, 'platforms', 'android-%s' % target_level, 'android.jar')
    if not path_exists(android_jar):
        print('>>>>>> %s does not exist, try to install with sdkmanager...' % android_jar)
        sub_cmd = [os.path.join(sdk_path, 'tools', 'bin', 'sdkmanager'),
                   'platforms;android-%s' % target_level]
        # print('>>>>>> %s' % ' '.join(sub_cmd))
        call(sub_cmd)
    android_jar = process_google_api(args, sdk_path, target_level, android_jar)
    cmd.extend(['-android', android_jar])
    print(">>>>>>>>>> {}".format(cmd))
    if args.verbose:
        cmd.append('-verbose')
    cmd.extend(unknown)  # TODO ????
    # print('...... %s' % ' '.join(cmd))
    print('...... {}'.format(" ".join(cmd)))
    if args.debug:  # print out the command
        return
    if not args.logpath:
        try:
            call(cmd, timeout=int(args.timeout)) 
        except TimeoutExpired:
            sys.exit(-50)
    else:
        with open(args.logpath, 'w') as outfile:
            call(cmd, timeout=int(args.timeout), stdout=outfile, stderr=outfile)
            print('...... log saved to %s' % outfile.name)
            
    remove_temp_dirs()


def process_google_api(args, sdk_path, target_level, android_jar):
    if args.google:
        google_api_dir = find_best_google_api(sdk_path, target_level)
        if google_api_dir == 0 or not path_exists(google_api_dir):
            print(">>>>>> Google API Level: %d not installed, try to install with sdkmanager..." % target_level)
            sub_cmd = [os.path.join(sdk_path, 'tools', 'bin', 'sdkmanager'),
                       'add-ons;addon-google_apis-google-%s' % target_level]
            # print('>>>>>> %s' % ' '.join(sub_cmd))
            if call(sub_cmd) != 0:
                sub_cmd = [os.path.join(sdk_path, 'tools', 'bin', 'sdkmanager'),
                           'add-ons;addon-google_apis-google-24']
                # print('>>>>>> %s' % ' '.join(sub_cmd))
                call(sub_cmd)
            google_api_dir = find_best_google_api(sdk_path, target_level)
        google_api = extract_libs_from_path(google_api_dir + "/libs")
        if len(google_api) != 0:
            android_jar = android_jar + ":" + google_api
    return android_jar


def get_target_level(args, apktool_dir):
    if args.apilevel != '-1':
        target_level = int(args.apilevel)
    else:
        target_level = extract_target_api(os.path.join(apktool_dir, 'apktool.yml'))
        if target_level == -1:
            print('...... cannot determine the target API level for APK. Fallback to use 29.')
            target_level = 29
        elif target_level < 10:
            print('...... target API level is below 10. Force to use 10.')
            target_level = 10
    return target_level


def build(args, unknown):
    cmd = [os.path.join(gator_dir, 'gradlew'), ':sootandroid:shadowJar']
    call(cmd)


def main():
    parser = argparse.ArgumentParser(
        description='GATOR: Program Analysis Toolkit For Android.')

    subparsers = parser.add_subparsers(dest='command',
                                       metavar='COMMAND')
    subparsers.required = True

    ####################################
    ####################################
    parser_compile = subparsers.add_parser('build',
                                           aliases=['b'],
                                           help='build GATOR')
    parser_compile.set_defaults(func=build)

    ####################################
    ####################################
    parser_analyze = subparsers.add_parser('analyze',
                                           aliases=['a'],
                                           help='analyze APK')
    parser_analyze.set_defaults(func=analyze)

    parser_analyze.add_argument('-d', '--debug',
                                dest='debug',
                                action='store_true',
                                default=False,
                                help='debug mode (print out the Java command)')

    parser_analyze.add_argument('-v', '--verbose',
                                dest='verbose',
                                action='store_true',
                                default=False,
                                help='verbose mode')

    parser_analyze.add_argument('--sdk',
                                dest='sdkpath',
                                metavar='ANDROID_SDK_HOME',
                                required=False,
                                help='path to the Android SDK ($ANDROID_SDK_HOME by default)')

    parser_analyze.add_argument('--log',
                                dest='logpath',
                                metavar='LOG_FILE',
                                default='',
                                required=False,
                                help='save log to disk')

    parser_analyze.add_argument('-t', '--timeout',
                                dest='timeout',
                                metavar='TIMEOUT',
                                default='3600',
                                required=False,
                                help='timeout in seconds')

    parser_analyze.add_argument('-g', '--google',
                                dest='google',
                                action='store_true',
                                default=False,
                                help='add Google support')

    parser_analyze.add_argument('--api',
                                dest='apilevel',
                                metavar='API_LEVEL',
                                required=False,
                                default='-1',
                                help='specify API level')
    
    parser_analyze.add_argument('--client-jar',
                                dest='classpath',                                
                                required=False,
                                default='',
                                help='additional classpath (jars with clients)')

    parser_analyze.add_argument('-p', '--apk',
                                dest='apkpath',
                                metavar='APK',
                                required=True,
                                help='path to the APK')

    ####################################
    ####################################

    args, unknown = parser.parse_known_args()
    args.func(args, unknown)


if __name__ == '__main__':
    main()
