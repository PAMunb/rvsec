 /** * JavaCC file */options{  JDK_VERSION = "1.5";  STATIC = false;}PARSER_BEGIN(PTCARETParser)package com.runtimeverification.rvmonitor.logicrepository.plugins.ptcaret.parser;import java.util.*;import java.io.*;import com.runtimeverification.rvmonitor.logicrepository.plugins.ptcaret.ast.*;public class PTCARETParser{  public static PTCARET_Formula parse(String input) throws ParseException  {    PTCARET_Formula formula;    Reader reader = new StringReader(input);    PTCARETParser parser = new PTCARETParser(reader);    try    {      formula = parser.PTCARET_EntireFormula();    }    catch (Exception e)    {      throw new ParseException(e.getMessage());    }    catch (Error e)    {      throw new ParseException(e.getMessage());    }    return formula;  }}PARSER_END(PTCARETParser)SKIP :{  " "| "\r"| "\t"| "\n"}TOKEN : /* OPERATORS */{  < OR :    "or"  | "\\/"  | "||" >| < AND :    "and"  | "/\\"  | "&&" >| < XOR :    "++"  | "xor"  | "^" >| < NOT :    "!"  | "not" >| < IMPLIES :    "->"  | "=>"  | "implies" >| < IFF : "<->" >  /* Standard temporal operators */| < ALWAYS : "[*]" >| < EVENTUALLY : "<*>" >| < PREVIOUSLY : "(*)" >| < SINCE : "S" >  /* Abstract temporal operators */| < AB_ALWAYS : "[*a]" >| < AB_EVENTUALLY : "<*a>" >| < AB_PREVIOUSLY : "(*a)" >| < AB_SINCE : "Sa" >  /* Derived temporal operators */| < ATBEGIN : "@b" >| < ATCALL : "@c" >  /* Derived begin stack operators */| < ALWAYS_STACK_ATBEGIN : "[*s@b]" >| < EVENTUALLY_STACK_ATBEGIN : "<*s@b>" >| < SINCE_STACK_ATBEGIN : "Ss@b" >  /* Derived call stack operators */| < ALWAYS_STACK_ATCALL : "[*s@c]" >| < EVENTUALLY_STACK_ATCALL : "<*s@c>" >| < SINCE_STACK_ATCALL : "Ss@c" >  /* Derived begin-or-call stack operators */| < ALWAYS_STACK : "[*s@bc]" >| < EVENTUALLY_STACK : "<*s@bc>" >| < SINCE_STACK : "Ss@bc" >}TOKEN :{  < CONSTANT : (< DIGIT >)+ >| < TRUE : "true" >| < FALSE : "false" >| < ID :    (      < LETTER >    | "_"    )    (      < LETTER >    | < DIGIT >    | "_"    )* >| < DIGIT : [ "0"-"9" ] >| < LETTER : [ "a"-"z", "A"-"Z" ] >}PTCARET_Formula PTCARET_EntireFormula() :{  Token t;  PTCARET_Formula f;}{  f = PTCARET_Formula() < EOF >  {    return f;  }}PTCARET_Formula PTCARET_Formula() :{  Token t;  PTCARET_Formula f1;  PTCARET_Formula f2;}{  f1 = PTCARET_ImpliesFormula()  (    < IFF >     f2 = PTCARET_ImpliesFormula()    {      f1 = new PTCARET_BinaryFormula(f1, f2, PTCARET_BinaryFormula.Operator.iff);    }  )*  {    return f1;  }}PTCARET_Formula PTCARET_ImpliesFormula() :{  Token t;  PTCARET_Formula f1;  PTCARET_Formula f2;}{  f1 = PTCARET_OrFormula()  (    < IMPLIES > f2 = PTCARET_OrFormula()    {      f1 = new PTCARET_BinaryFormula(f1, f2, PTCARET_BinaryFormula.Operator.implies);    }  )*  {    return f1;  }}PTCARET_Formula PTCARET_OrFormula() :{  Token t;  PTCARET_Formula f1;  PTCARET_Formula f2;}{  f1 = PTCARET_XorFormula()  (    < OR >     f2 = PTCARET_XorFormula()    {      f1 = new PTCARET_BinaryFormula(f1, f2, PTCARET_BinaryFormula.Operator.or);    }  )*  {    return f1;  }}PTCARET_Formula PTCARET_XorFormula() :{  Token t;  PTCARET_Formula f1;  PTCARET_Formula f2;}{  f1 = PTCARET_AndFormula()  (    < XOR >     f2 = PTCARET_AndFormula()    {      f1 = new PTCARET_BinaryFormula(f1, f2, PTCARET_BinaryFormula.Operator.xor);    }  )*  {    return f1;  }}PTCARET_Formula PTCARET_AndFormula() :{  Token t;  PTCARET_Formula f1;  PTCARET_Formula f2;}{  f1 = PTCARET_Since_At_Begin_Formula()  (    < AND >     f2 = PTCARET_Since_At_Begin_Formula()    {      f1 = new PTCARET_BinaryFormula(f1, f2, PTCARET_BinaryFormula.Operator.and);    }  )*  {    return f1;  }}PTCARET_Formula PTCARET_Since_At_Begin_Formula() :{  Token t;  PTCARET_Formula f1;  PTCARET_Formula f2;}{  f1 = PTCARET_Since_At_Call_Formula()  (    < SINCE_STACK_ATBEGIN >     f2 = PTCARET_Since_At_Call_Formula()    {      f1 = new PTCARET_BinaryFormula(f1, f2, PTCARET_BinaryFormula.Operator.since_at_b);    }  )*  {    return f1;  }}PTCARET_Formula PTCARET_Since_At_Call_Formula() :{  Token t;  PTCARET_Formula f1;  PTCARET_Formula f2;}{  f1 = PTCARET_Since_At_BeginCall_Formula()  (    < SINCE_STACK_ATCALL >     f2 = PTCARET_Since_At_BeginCall_Formula()    {      f1 = new PTCARET_BinaryFormula(f1, f2, PTCARET_BinaryFormula.Operator.since_at_c);    }  )*  {    return f1;  }}PTCARET_Formula PTCARET_Since_At_BeginCall_Formula() :{  Token t;  PTCARET_Formula f1;  PTCARET_Formula f2;}{  f1 = PTCARET_AB_Since_Formula()  (    < SINCE_STACK >     f2 = PTCARET_AB_Since_Formula()    {      f1 = new PTCARET_BinaryFormula(f1, f2, PTCARET_BinaryFormula.Operator.since_at_bc);    }  )*  {    return f1;  }}PTCARET_Formula PTCARET_AB_Since_Formula() :{  Token t;  PTCARET_Formula f1;  PTCARET_Formula f2;}{  f1 = PTCARET_Since_Formula()  (    < AB_SINCE >     f2 = PTCARET_Since_Formula()    {      f1 = new PTCARET_BinaryFormula(f1, f2, PTCARET_BinaryFormula.Operator.ab_since);    }  )*  {    return f1;  }}PTCARET_Formula PTCARET_Since_Formula() :{  Token t;  PTCARET_Formula f1;  PTCARET_Formula f2;}{  f1 = PTCARET_Clause()  (    < SINCE >     f2 = PTCARET_Clause()    {      f1 = new PTCARET_BinaryFormula(f1, f2, PTCARET_BinaryFormula.Operator.since);    }  )*  {    return f1;  }}PTCARET_Formula PTCARET_Clause() :{  Token t;  PTCARET_Formula f;}{  f = PTCARET_Term()  {    return f;  }| < NOT > f = PTCARET_Clause()  {    return new PTCARET_UnaryFormula(f, PTCARET_UnaryFormula.Operator.not);  }| < PREVIOUSLY > f = PTCARET_Clause()  {    return new PTCARET_UnaryFormula(f, PTCARET_UnaryFormula.Operator.prev);  }| < EVENTUALLY > f = PTCARET_Clause()  {    return new PTCARET_UnaryFormula(f, PTCARET_UnaryFormula.Operator.eventually);  }| < ALWAYS > f = PTCARET_Clause()  {    return new PTCARET_UnaryFormula(f, PTCARET_UnaryFormula.Operator.always);  }| < AB_PREVIOUSLY > f = PTCARET_Clause()  {    return new PTCARET_UnaryFormula(f, PTCARET_UnaryFormula.Operator.ab_prev);  }| < AB_EVENTUALLY > f = PTCARET_Clause()  {    return new PTCARET_UnaryFormula(f, PTCARET_UnaryFormula.Operator.ab_eventually);  }| < AB_ALWAYS > f = PTCARET_Clause()  {    return new PTCARET_UnaryFormula(f, PTCARET_UnaryFormula.Operator.ab_always);  }| < ATBEGIN > f = PTCARET_Clause()  {    return new PTCARET_UnaryFormula(f, PTCARET_UnaryFormula.Operator.at_begin);  }| < ATCALL > f = PTCARET_Clause()  {    return new PTCARET_UnaryFormula(f, PTCARET_UnaryFormula.Operator.at_call);  }| < ALWAYS_STACK_ATBEGIN > f = PTCARET_Clause()  {    return new PTCARET_UnaryFormula(f, PTCARET_UnaryFormula.Operator.always_at_begin);  }| < ALWAYS_STACK_ATCALL > f = PTCARET_Clause()  {    return new PTCARET_UnaryFormula(f, PTCARET_UnaryFormula.Operator.always_at_call);  }| < ALWAYS_STACK > f = PTCARET_Clause()  {    return new PTCARET_UnaryFormula(f, PTCARET_UnaryFormula.Operator.always_at_begincall);  }| < EVENTUALLY_STACK_ATBEGIN > f = PTCARET_Clause()  {    return new PTCARET_UnaryFormula(f, PTCARET_UnaryFormula.Operator.eventually_at_begin);  }| < EVENTUALLY_STACK_ATCALL > f = PTCARET_Clause()  {    return new PTCARET_UnaryFormula(f, PTCARET_UnaryFormula.Operator.eventually_at_call);  }| < EVENTUALLY_STACK > f = PTCARET_Clause()  {    return new PTCARET_UnaryFormula(f, PTCARET_UnaryFormula.Operator.eventually_at_begincall);  }}PTCARET_Formula PTCARET_Term() :{  Token t;  PTCARET_Formula f;}{  < TRUE >  {    return new PTCARET_True();  }| < FALSE >  {    return new PTCARET_False();  }| t = < ID >  {    return new PTCARET_Id(t.image);  }| "(" f = PTCARET_Formula() ")"  {    return f;  }}