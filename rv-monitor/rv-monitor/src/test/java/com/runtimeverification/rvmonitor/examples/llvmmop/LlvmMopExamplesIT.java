package com.runtimeverification.rvmonitor.examples.llvmmop;

import com.runtimeverification.rvmonitor.c.rvc.Main;
import com.runtimeverification.rvmonitor.examples.TestHelper;
import org.apache.commons.io.FileUtils;
import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.Collection;

/**
 * Base class for llvmmop examples JUnit tests.
 * @author TraianSF
 */
@RunWith(Parameterized.class)
public class LlvmMopExamplesIT {
    public static final String RVC = "__RVC_";
    public static final String MONITOR_BC = "_Monitor.bc";
    private final String specPath;
    private final String specName;
    private final TestHelper helper;


    public LlvmMopExamplesIT(String specPath, String specName) {
        this.specName = specName;
        this.specPath = specPath;
        helper = new TestHelper(specPath);
    }

    private void createMonitor() throws Exception {
        helper.deleteFiles(false,
                RVC + specName + MONITOR_BC,
                "Makefile",
                "Makefile.instrument",
                "aspect.map"
        );
        File projectRoot = new File(System.getProperty("user.dir")).getParentFile();
        helper.testCommand(null, projectRoot + File.separator + "bin" + File.separator +
            "rv-monitor", "-llvm", new File(specPath).getName());

        Files.move(
                helper.getPath("Makefile.new"),
                helper.getPath("Makefile")
        );
    }


    /**
     * Tests the usual build-test-instument-test-uninstrument-test cycle.
     * Matches precomputed expected output files against the output generated by the tests.
     * @throws Exception
     */
    @Ignore @Test
    public void testTest() throws Exception {
        createMonitor();
        helper.testCommand(null, "make", "clean");
        helper.testCommand(null, "make");
        helper.testCommand("tests/original", "make", "-s", "-f", "Makefile.original", "test");
        helper.testCommand(null, "make", "instrument");
        helper.testCommand("tests/instrumented", "make", "-s", "-f", "Makefile.original", "test");
        helper.testCommand(null, "make", "uninstrument");
        helper.testCommand("tests/original", "make", "-s", "-f", "Makefile.original", "test");
        helper.testCommand(null, "make", "clean");
        helper.deleteFiles(false,
                RVC + specName + MONITOR_BC,
                "Makefile",
                "Makefile.instrument",
                "aspect.map",
                "tests/original.actual.out",
                "tests/original.actual.err",
                "tests/instrumented.actual.out",
                "tests/instrumented.actual.err"
        );

    }


    // The method bellow creates the set of parameter instances to be used as seeds by
    // the test constructor.  Junit will run the testsuite once for each parameter instance.
    // This is documented in the Junit Parameterized tests page:
    // http://junit.sourceforge.net/javadoc/org/junit/runners/Parameterized.html
    @Parameterized.Parameters(name="{0}")
    public static Collection<Object[]> data() {
        Collection<Object[]> data = new ArrayList<Object[]>();
        for (File rvmFile : FileUtils.listFiles(new File("../examples/llvmmop"), new String[]{"rvm"}, true)) {
            String rvmFileName = rvmFile.getName();
            String fileName = rvmFileName.substring(0, rvmFileName.lastIndexOf('.'));
            String[] parts = fileName.split("_");
            String specPath = rvmFile.getPath();
            String specName = "";
            for (String part : parts) {
                specName += Character.toUpperCase(part.charAt(0)) + part.substring(1);
            }
            data.add(new Object[] {specPath, specName});
        }
        return data;
    }
}
