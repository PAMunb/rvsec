package com.runtimeverification.rvmonitor.examples.java;

import com.runtimeverification.rvmonitor.examples.TestHelper;
import org.apache.commons.io.FileUtils;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;

import java.io.File;
import java.util.List;
import java.util.ArrayList;
import java.util.Collection;

/**
 * Base class for Java examples JUnit tests.
 * @author TraianSF
 * @author A. Cody Schuffelen
 */
@RunWith(Parameterized.class)
public class JavaExamplesIT {
    private TestHelper helper;
    private String rvmFile;
    private String rvmDirectory;

    public JavaExamplesIT(String specPath) {
        rvmFile = specPath;
        rvmDirectory = new File(rvmFile).getParentFile().getParent();
        helper = new TestHelper(new File(specPath).getParent());
    }
    
    /**
     * Search for the actual test cases, all of which are in the form TestCaseName/TestCaseName.java.
     * We take advantage of this convention to select only the actual test case folders.
     * @param directory The directory to search for test cases in.
     * @return All the java test case files.
     */
    private static Collection<File> collectSubCases(File directory) {
        ArrayList<File> ret = new ArrayList<File>();
        for (File file : directory.listFiles()) {
            if (file.isDirectory()) {
                for(File subfile : file.listFiles()) {
                    if((file.getName() + ".java").equals(subfile.getName())) {
                        ret.add(file);
                    }
                }
            }
        }
        return ret;
    }

    /**
     * Builds the tests, then runs them.
     * Matches precomputed expected output files against the output generated by the tests.
     * @throws Exception
     */
    @Test
    public void testTest() throws Exception {
        String rvmName = new File(rvmFile).getName();
        rvmName = rvmName.substring(0, rvmName.indexOf("."));
        
        File projectRoot = new File(System.getProperty("user.dir")).getParentFile();
        helper.testCommand(null, projectRoot + File.separator + "bin" + File.separator + "rv-monitor", "rvm" + File.separator + rvmName + ".rvm");
        Collection<File> testCases = collectSubCases(new File(rvmDirectory));
        String rtJar = projectRoot + File.separator + "target" + File.separator + "release" + 
            File.separator + "rv-monitor" + File.separator + "lib" + File.separator + "*";
        for(File testCase : testCases) {
            String classpathArgs = rtJar + ":rvm/:" + testCase.getName() + File.separator + ":.";
            String testCaseJava = testCase.getName() + File.separator + testCase.getName() + ".java";
            
            helper.testCommand(null, "javac", "-cp", classpathArgs, "rvm" + File.separator + rvmName + "RuntimeMonitor.java", "-d", ".");
            helper.testCommand(null, "javac", "-cp", classpathArgs, testCaseJava);
            String testCaseClass = testCase.getName() + File.separator + testCase.getName();
            helper.testCommand(testCaseClass, false, "java", "-cp", classpathArgs, testCaseClass);
            helper.deleteFiles(true, testCaseClass + ".class");
            helper.deleteFiles(true, testCaseClass + ".actual.out");
            helper.deleteFiles(true, testCaseClass + ".actual.err");
        }
        helper.deleteFiles(true, "rvm" + File.separator + rvmName + "RuntimeMonitor.java");
		helper.deleteFiles(false, "rvm" + File.separator + "I" + rvmName + "Monitor.class");
        helper.deleteFiles(false, "rvm" + File.separator + rvmName + "Monitor.class");
        helper.deleteFiles(false, "rvm" + File.separator + rvmName + "Monitor$IntStack.class");
        helper.deleteFiles(false, "rvm" + File.separator + rvmName + "SuffixMonitor.class");
        helper.deleteFiles(false, "rvm" + File.separator + rvmName + "Monitor_Set.class");
        helper.deleteFiles(false, "rvm" + File.separator + rvmName + "SuffixMonitor_Set.class");
        helper.deleteFiles(false, "rvm" + File.separator + rvmName + "RuntimeMonitor.class");
        helper.deleteFiles(false, "rvm" + File.separator + rvmName + "DisableHolder.class");
    }

    // The method bellow creates the set of parameter instances to be used as seeds by
    // the test constructor.  Junit will run the testsuite once for each parameter instance.
    // This is documented in the Junit Parameterized tests page:
    // http://junit.sourceforge.net/javadoc/org/junit/runners/Parameterized.html
    @Parameterized.Parameters(name="{0}")
    public static Collection<Object[]> data() {
        Collection<Object[]> data = new ArrayList<Object[]>();
        for (File rvmFile : FileUtils.listFiles(new File("../examples/java"), new String[]{"rvm"}, true)) {
            String specPath = rvmFile.getPath();
            if(collectSubCases(rvmFile.getParentFile().getParentFile()).size() > 0) {
                data.add(new Object[] {specPath});
            }
        }
        return data;
    }
}
