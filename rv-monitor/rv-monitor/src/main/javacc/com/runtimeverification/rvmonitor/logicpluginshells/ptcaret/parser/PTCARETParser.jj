 /** * JavaCC file */options{  JDK_VERSION = "1.5";}PARSER_BEGIN(PTCARETParser)package com.runtimeverification.rvmonitor.logicpluginshells.ptcaret.parser;import java.util.*;import java.io.*;import com.runtimeverification.rvmonitor.logicpluginshells.ptcaret.ast.*;public class PTCARETParser{  public static PseudoCode parse(String input) throws ParseException  {    PseudoCode code;    Reader reader = new StringReader(input);    PTCARETParser parser = new PTCARETParser(reader);    try    {      code = PTCARETParser.EntireCode();    }    catch (Exception e)    {      throw new ParseException(e.getMessage());    }    catch (Error e)    {      throw new ParseException(e.getMessage());    }    return code;  }}PARSER_END(PTCARETParser)SKIP :{  " "| "\r"| "\t"| "\n"}TOKEN : /* OPERATORS */{  < OR : "||" >| < AND : "&&" >| < XOR : "^" >| < NOT : "!" >}TOKEN :{  < CONSTANT : (< DIGIT >)+ >| < TRUE : "true" >| < FALSE : "false" >| < OUTPUT : "output" >| < ALPHA : "$alpha$" >| < BETA : "$beta$" >| < ID :    (      < LETTER >    | "_"    )    (      < LETTER >    | < DIGIT >    | "_"    )* >| < DIGIT : [ "0"-"9" ] >| < LETTER : [ "a"-"z", "A"-"Z" ] >}PseudoCode EntireCode() :{  PseudoCode c;}{  c = PseudoCode() < EOF >  {    return c;  }}PseudoCode PseudoCode() :{  PseudoCode_Assignments before;  PseudoCode_Output output;  PseudoCode_Assignments after;}{  before = PseudoCode_Assignments()  output = PseudoCode_Output()  after = PseudoCode_Assignments()  {    return new PseudoCode(before, output, after);  }}PseudoCode_Output PseudoCode_Output() :{  PseudoCode_Expr expr;}{  < OUTPUT > "(" expr = PseudoCode_OrExpr() ")"  {    return new PseudoCode_Output(expr);  }}PseudoCode_Assignments PseudoCode_Assignments() :{  PseudoCode_Assignment assignment;  PseudoCode_Assignments assignments = new PseudoCode_Assignments(); }{  (    assignment = PseudoCode_Assignment()    {      assignments.add(assignment);    }  )*  {    return assignments;  }}PseudoCode_Assignment PseudoCode_Assignment() :{  PseudoCode_VarExpr var;  PseudoCode_Expr expr;}{  var = PseudoCode_VarExpr()  ":="  expr = PseudoCode_OrExpr()  ";"  {    return new PseudoCode_Assignment(var, expr);  }}PseudoCode_Expr PseudoCode_OrExpr() :{  PseudoCode_Expr e1;  PseudoCode_Expr e2;}{  e1 = PseudoCode_XorExpr()  (    < OR >    e2 = PseudoCode_XorExpr()    {      e1 = new PseudoCode_BinExpr(e1, PseudoCode_BinExpr.Operator.or, e2);    }  )*  {    return e1;  }}PseudoCode_Expr PseudoCode_XorExpr() :{  PseudoCode_Expr e1;  PseudoCode_Expr e2;}{  e1 = PseudoCode_AndExpr()  (    < XOR >    e2 = PseudoCode_AndExpr()    {      e1 = new PseudoCode_BinExpr(e1, PseudoCode_BinExpr.Operator.xor, e2);    }  )*  {    return e1;  }}PseudoCode_Expr PseudoCode_AndExpr() :{  PseudoCode_Expr e1;  PseudoCode_Expr e2;}{  e1 = PseudoCode_Clause()  (    < AND >    e2 = PseudoCode_Clause()    {      e1 = new PseudoCode_BinExpr(e1, PseudoCode_BinExpr.Operator.and, e2);    }  )*  {    return e1;  }}PseudoCode_Expr PseudoCode_Clause() :{  Token t;  PseudoCode_Expr e;}{  < NOT > e = PseudoCode_Clause()   {    return new PseudoCode_NotExpr(e);  }| < TRUE >  {    return new PseudoCode_TrueExpr();  }| < FALSE >  {    return new PseudoCode_FalseExpr();  }| t = < ID >  {    return new PseudoCode_EventExpr(t.image);  }| t = < OUTPUT >  {    return new PseudoCode_EventExpr(t.image);  }| "(" e = PseudoCode_OrExpr() ")"  {    return e;  }| e = PseudoCode_VarExpr()  {    return e;  }}PseudoCode_VarExpr PseudoCode_VarExpr() :{  Token t;}{  < ALPHA > "[" t = < CONSTANT > "]"  {    return new PseudoCode_VarExpr(PseudoCode_VarExpr.Type.alpha, Integer.parseInt(t.image));  }| < BETA > "[" t = < CONSTANT > "]"  {    return new PseudoCode_VarExpr(PseudoCode_VarExpr.Type.beta, Integer.parseInt(t.image));  }}