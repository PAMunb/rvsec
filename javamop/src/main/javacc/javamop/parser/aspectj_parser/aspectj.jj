// Copyright (c) 2002-2014 JavaMOP Team. All Rights Reserved.
 /*
 * Copyright (C) 2008 Feng Chen.
 * 
 * This file is part of JavaMOP parser.  It is based on the Java 1.5 parser developed by Julio Vilmar Gesser
 *
 * The original parser is under the LGPL, you should have recieve a copy of the LGPL with this
 * parser code.  If not see <http://www.gnu.org/licenses/>.
 */
options
{
  LOOKAHEAD= 1;

  STATIC = false;
  CACHE_TOKENS = true;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = true;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
}

PARSER_BEGIN(AspectJParser)
package javamop.parser.aspectj_parser;
import java.io.*;
import java.util.*;
import javamop.parser.ast.*;
import javamop.parser.ast.aspectj.*;
import javamop.parser.ast.body.*;
import javamop.parser.ast.expr.*;
import javamop.parser.ast.stmt.*;
import javamop.parser.ast.type.*;
import javamop.parser.astex.aspectj.*;

public class AspectJParser
{
  private static AspectJParser parser;

  public static PointCut parse(InputStream in, String encoding) throws ParseException
  {
    if (parser == null)
    {
      parser = new AspectJParser(in, encoding);
    }
    else
    {
      parser.ReInit(in);
    }
    return parser.PointCut();
  }

  public static PointCut parse(InputStream in) throws ParseException
  {
    return parse(in, null);
  }

  public static PointCut parse(File file, String encoding) throws ParseException
  {
    try
    {
      FileInputStream in = new FileInputStream(file);
      try
      {
        return parse(in, encoding);
      }
      finally
      {
        in.close();
      }
    }
    catch (IOException e)
    {
      throw new RuntimeException(e);
    }
  }

  public static PointCut parse(File file) throws ParseException
  {
    return parse(file, null);
  }

  private List add(List list, Object obj)
  {
    if (list == null)
    {
      list = new LinkedList();
    }
    list.add(obj);
    return list;
  }

  private class Modifier
  {
    final int modifiers;

    final int not_modifiers;

    final List annotations;
    int line, column;

    public Modifier(int modifiers, List annotations)
    {
      this.modifiers = modifiers;
      this.not_modifiers = 0;
      this.annotations = annotations;
    }

    public Modifier(int modifiers, int not_modifiers, int line, int column)
    {
      this.modifiers = modifiers;
      this.not_modifiers = not_modifiers;
      this.annotations = null;
      this.line = line;
      this.column = column;
    }
  }

  private class PositionString
  {
    int line, column;
    String str;

    public PositionString(int line, int column, String str)
    {
      this.line = line;
      this.column = column;
      this.str = str;
    }
  }
}

PARSER_END(AspectJParser)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

/* RESERVED WORDS AND LITERALS */
TOKEN :
{
  < ABSTRACT : "abstract" >
| < ASSERT : "assert" >
| < BOOLEAN : "boolean" >
| < BREAK : "break" >
| < BYTE : "byte" >
| < CASE : "case" >
| < CATCH : "catch" >
| < CHAR : "char" >
| < CLASS : "class" >
| < CONST : "const" >
| < CONTINUE : "continue" >
| < _DEFAULT : "default" >
| < DO : "do" >
| < DOUBLE : "double" >
| < ELSE : "else" >
| < ENUM : "enum" >
| < EXTENDS : "extends" >
| < FALSE : "false" >
| < FINAL : "final" >
| < FINALLY : "finally" >
| < FLOAT : "float" >
| < FOR : "for" >
| < GOTO : "goto" >
| < NEW : "new" >
| < IF : "if" >
| < IMPLEMENTS : "implements" >
| < IMPORT : "import" >
| < INSTANCEOF : "instanceof" >
| < INT : "int" >
| < INTERFACE : "interface" >
| < LONG : "long" >
| < NATIVE : "native" >
| < NULL : "null" >
| < PACKAGE : "package" >
| < PRIVATE : "private" >
| < PROTECTED : "protected" >
| < PUBLIC : "public" >
| < RETURN : "return" >
| < SHORT : "short" >
| < STATIC : "static" >
| < STRICTFP : "strictfp" >
| < SUPER : "super" >
| < SWITCH : "switch" >
| < SYNCHRONIZED : "synchronized" >
| < THIS : "this" >
| < THROW : "throw" >
| < THROWS : "throws" >
| < TRANSIENT : "transient" >
| < TRUE : "true" >
| < TRY : "try" >
| < VOID : "void" >
| < VOLATILE : "volatile" >
| < WHILE : "while" >
}

/* RESERVED WORDS AND LITERALS for AspectJ and JavaMOP */
TOKEN :
{
  < EVENT : "event" >
| < CREATION : "creation" >
| < UNSYNC : "unsynchronized" >
| < DECENT : "decentralized" >
| < PERTHREAD : "perthread" >
| < SUFFIX : "suffix" >
| < BEFORE : "before" >
| < AFTER : "after" >
| < AROUND : "around" >
| < CALL : "call" >
| < EXEC : "execution" >
| < GET : "get" >
| < SET : "set" >
| < TARGET : "target" >
| < WITHIN : "within" >
| < ARGS : "args" >
| < THREAD : "thread" >
| < THREADNAME: "threadName" >
| < THREADBLOCKED: "threadBlocked" >
| < CONDITION : "condition" >
| < COUNTCOND : "countCond" >
| < CFLOW : "cflow" >
| < CFLOWBELOW : "cflowbelow" >
| < RETURNING : "returning" >
| < THROWING : "throwing" >
| < ENDPROGRAM : "endProgram" >
| < ENDTHREAD : "endThread" >
| < ENDOBJECT : "endObject" >
| < STARTTHREAD : "startThread" >
| < HANDLER : "handler" >
}

/* LITERALS */
TOKEN :
{
  < LONG_LITERAL :
    < DECIMAL_LITERAL > ([ "l", "L" ])
  | < HEX_LITERAL > ([ "l", "L" ])
  | < OCTAL_LITERAL > ([ "l", "L" ]) >
| < INTEGER_LITERAL :
    < DECIMAL_LITERAL >
  | < HEX_LITERAL >
  | < OCTAL_LITERAL > >
| < #DECIMAL_LITERAL : [ "1"-"9" ] ([ "0"-"9" ])* >
| < #HEX_LITERAL : "0" [ "x", "X" ] ([ "0"-"9", "a"-"f", "A"-"F" ])+ >
| < #OCTAL_LITERAL : "0" ([ "0"-"7" ])* >
| < FLOATING_POINT_LITERAL :
    < DECIMAL_FLOATING_POINT_LITERAL >
  | < HEXADECIMAL_FLOATING_POINT_LITERAL > >
| < #DECIMAL_FLOATING_POINT_LITERAL :
    ([ "0"-"9" ])+ "." ([ "0"-"9" ])* (< DECIMAL_EXPONENT >)? ([ "f", "F", "d", "D" ])?
  | "." ([ "0"-"9" ])+ (< DECIMAL_EXPONENT >)? ([ "f", "F", "d", "D" ])?
  | ([ "0"-"9" ])+ < DECIMAL_EXPONENT > ([ "f", "F", "d", "D" ])?
  | ([ "0"-"9" ])+ (< DECIMAL_EXPONENT >)? [ "f", "F", "d", "D" ] >
| < #DECIMAL_EXPONENT : [ "e", "E" ] ([ "+", "-" ])? ([ "0"-"9" ])+ >
| < #HEXADECIMAL_FLOATING_POINT_LITERAL :
    "0" [ "x", "X" ] ([ "0"-"9", "a"-"f", "A"-"F" ])+ (".")? < HEXADECIMAL_EXPONENT > ([ "f", "F", "d", "D" ])?
  | "0" [ "x", "X" ] ([ "0"-"9", "a"-"f", "A"-"F" ])* "." ([ "0"-"9", "a"-"f", "A"-"F" ])+ < HEXADECIMAL_EXPONENT > ([ "f", "F", "d", "D" ])? >
| < #HEXADECIMAL_EXPONENT : [ "p", "P" ] ([ "+", "-" ])? ([ "0"-"9" ])+ >
| < CHARACTER_LITERAL :
    "'"
    (
      (~[ "'", "\\", "\n", "\r" ])
    |
      (
        "\\"
        (
          [ "n", "t", "b", "r", "f", "\\", "'", "\"" ]
        | [ "0"-"7" ] ([ "0"-"7" ])?
        | [ "0"-"3" ] [ "0"-"7" ] [ "0"-"7" ]
        )
      )
    | ("\\u" [ "0"-"9", "A"-"F", "a"-"f" ] [ "0"-"9", "A"-"F", "a"-"f" ] [ "0"-"9", "A"-"F", "a"-"f" ] [ "0"-"9", "A"-"F", "a"-"f" ])
    )
    "'" >
| < STRING_LITERAL :
    "\""
    (
      (~[ "\"", "\\", "\n", "\r" ])
    |
      (
        "\\"
        (
          [ "n", "t", "b", "r", "f", "\\", "'", "\"" ]
        | [ "0"-"7" ] ([ "0"-"7" ])?
        | [ "0"-"3" ] [ "0"-"7" ] [ "0"-"7" ]
        )
      )
    | ("\\u" [ "0"-"9", "A"-"F", "a"-"f" ] [ "0"-"9", "A"-"F", "a"-"f" ] [ "0"-"9", "A"-"F", "a"-"f" ] [ "0"-"9", "A"-"F", "a"-"f" ])
    )*
    "\"" >
}

/* IDENTIFIERS */
TOKEN :
{
  < IDPATTERN : < LETTER > (< PART_LETTER >)* >
| 
  < #LETTER : 
    [ "*", 
    // all chars for which Character.isIdentifierStart is true      
    "\u0024", // "$"
    "\u0041"-"\u005a", // "A"-"Z"
    "\u005f", // "_"
    "\u0061"-"\u007a", // "a"-"z"
    "\u00a2"-"\u00a5", 
    "\u00aa", 
    "\u00b5", 
    "\u00ba", 
    "\u00c0"-"\u00d6", 
    "\u00d8"-"\u00f6", 
    "\u00f8"-"\u0236", 
    "\u0250"-"\u02c1", 
    "\u02c6"-"\u02d1", 
    "\u02e0"-"\u02e4", 
    "\u02ee", 
    "\u037a", 
    "\u0386", 
    "\u0388"-"\u038a", 
    "\u038c", 
    "\u038e"-"\u03a1", 
    "\u03a3"-"\u03ce", 
    "\u03d0"-"\u03f5", 
    "\u03f7"-"\u03fb", 
    "\u0400"-"\u0481", 
    "\u048a"-"\u04ce", 
    "\u04d0"-"\u04f5", 
    "\u04f8"-"\u04f9", 
    "\u0500"-"\u050f", 
    "\u0531"-"\u0556", 
    "\u0559", 
    "\u0561"-"\u0587", 
    "\u05d0"-"\u05ea", 
    "\u05f0"-"\u05f2", 
    "\u0621"-"\u063a", 
    "\u0640"-"\u064a", 
    "\u066e"-"\u066f", 
    "\u0671"-"\u06d3", 
    "\u06d5", 
    "\u06e5"-"\u06e6", 
    "\u06ee"-"\u06ef", 
    "\u06fa"-"\u06fc", 
    "\u06ff", 
    "\u0710", 
    "\u0712"-"\u072f", 
    "\u074d"-"\u074f", 
    "\u0780"-"\u07a5", 
    "\u07b1", 
    "\u0904"-"\u0939", 
    "\u093d", 
    "\u0950", 
    "\u0958"-"\u0961", 
    "\u0985"-"\u098c", 
    "\u098f"-"\u0990", 
    "\u0993"-"\u09a8", 
    "\u09aa"-"\u09b0", 
    "\u09b2", 
    "\u09b6"-"\u09b9", 
    "\u09bd", 
    "\u09dc"-"\u09dd", 
    "\u09df"-"\u09e1", 
    "\u09f0"-"\u09f3", 
    "\u0a05"-"\u0a0a", 
    "\u0a0f"-"\u0a10", 
    "\u0a13"-"\u0a28", 
    "\u0a2a"-"\u0a30", 
    "\u0a32"-"\u0a33", 
    "\u0a35"-"\u0a36", 
    "\u0a38"-"\u0a39", 
    "\u0a59"-"\u0a5c", 
    "\u0a5e", 
    "\u0a72"-"\u0a74", 
    "\u0a85"-"\u0a8d", 
    "\u0a8f"-"\u0a91", 
    "\u0a93"-"\u0aa8", 
    "\u0aaa"-"\u0ab0", 
    "\u0ab2"-"\u0ab3", 
    "\u0ab5"-"\u0ab9", 
    "\u0abd", 
    "\u0ad0", 
    "\u0ae0"-"\u0ae1", 
    "\u0af1", 
    "\u0b05"-"\u0b0c", 
    "\u0b0f"-"\u0b10", 
    "\u0b13"-"\u0b28", 
    "\u0b2a"-"\u0b30", 
    "\u0b32"-"\u0b33", 
    "\u0b35"-"\u0b39", 
    "\u0b3d", 
    "\u0b5c"-"\u0b5d", 
    "\u0b5f"-"\u0b61", 
    "\u0b71", 
    "\u0b83", 
    "\u0b85"-"\u0b8a", 
    "\u0b8e"-"\u0b90", 
    "\u0b92"-"\u0b95", 
    "\u0b99"-"\u0b9a", 
    "\u0b9c", 
    "\u0b9e"-"\u0b9f", 
    "\u0ba3"-"\u0ba4", 
    "\u0ba8"-"\u0baa", 
    "\u0bae"-"\u0bb5", 
    "\u0bb7"-"\u0bb9", 
    "\u0bf9", 
    "\u0c05"-"\u0c0c", 
    "\u0c0e"-"\u0c10", 
    "\u0c12"-"\u0c28", 
    "\u0c2a"-"\u0c33", 
    "\u0c35"-"\u0c39", 
    "\u0c60"-"\u0c61", 
    "\u0c85"-"\u0c8c", 
    "\u0c8e"-"\u0c90", 
    "\u0c92"-"\u0ca8", 
    "\u0caa"-"\u0cb3", 
    "\u0cb5"-"\u0cb9", 
    "\u0cbd", 
    "\u0cde", 
    "\u0ce0"-"\u0ce1", 
    "\u0d05"-"\u0d0c", 
    "\u0d0e"-"\u0d10", 
    "\u0d12"-"\u0d28", 
    "\u0d2a"-"\u0d39", 
    "\u0d60"-"\u0d61", 
    "\u0d85"-"\u0d96", 
    "\u0d9a"-"\u0db1", 
    "\u0db3"-"\u0dbb", 
    "\u0dbd", 
    "\u0dc0"-"\u0dc6", 
    "\u0e01"-"\u0e30", 
    "\u0e32"-"\u0e33", 
    "\u0e3f"-"\u0e46", 
    "\u0e81"-"\u0e82", 
    "\u0e84", 
    "\u0e87"-"\u0e88", 
    "\u0e8a", 
    "\u0e8d", 
    "\u0e94"-"\u0e97", 
    "\u0e99"-"\u0e9f", 
    "\u0ea1"-"\u0ea3", 
    "\u0ea5", 
    "\u0ea7", 
    "\u0eaa"-"\u0eab", 
    "\u0ead"-"\u0eb0", 
    "\u0eb2"-"\u0eb3", 
    "\u0ebd", 
    "\u0ec0"-"\u0ec4", 
    "\u0ec6", 
    "\u0edc"-"\u0edd", 
    "\u0f00", 
    "\u0f40"-"\u0f47", 
    "\u0f49"-"\u0f6a", 
    "\u0f88"-"\u0f8b", 
    "\u1000"-"\u1021", 
    "\u1023"-"\u1027", 
    "\u1029"-"\u102a", 
    "\u1050"-"\u1055", 
    "\u10a0"-"\u10c5", 
    "\u10d0"-"\u10f8", 
    "\u1100"-"\u1159", 
    "\u115f"-"\u11a2", 
    "\u11a8"-"\u11f9", 
    "\u1200"-"\u1206", 
    "\u1208"-"\u1246", 
    "\u1248", 
    "\u124a"-"\u124d", 
    "\u1250"-"\u1256", 
    "\u1258", 
    "\u125a"-"\u125d", 
    "\u1260"-"\u1286", 
    "\u1288", 
    "\u128a"-"\u128d", 
    "\u1290"-"\u12ae", 
    "\u12b0", 
    "\u12b2"-"\u12b5", 
    "\u12b8"-"\u12be", 
    "\u12c0", 
    "\u12c2"-"\u12c5", 
    "\u12c8"-"\u12ce", 
    "\u12d0"-"\u12d6", 
    "\u12d8"-"\u12ee", 
    "\u12f0"-"\u130e", 
    "\u1310", 
    "\u1312"-"\u1315", 
    "\u1318"-"\u131e", 
    "\u1320"-"\u1346", 
    "\u1348"-"\u135a", 
    "\u13a0"-"\u13f4", 
    "\u1401"-"\u166c", 
    "\u166f"-"\u1676", 
    "\u1681"-"\u169a", 
    "\u16a0"-"\u16ea", 
    "\u16ee"-"\u16f0", 
    "\u1700"-"\u170c", 
    "\u170e"-"\u1711", 
    "\u1720"-"\u1731", 
    "\u1740"-"\u1751", 
    "\u1760"-"\u176c", 
    "\u176e"-"\u1770", 
    "\u1780"-"\u17b3", 
    "\u17d7", 
    "\u17db"-"\u17dc", 
    "\u1820"-"\u1877", 
    "\u1880"-"\u18a8", 
    "\u1900"-"\u191c", 
    "\u1950"-"\u196d", 
    "\u1970"-"\u1974", 
    "\u1d00"-"\u1d6b", 
    "\u1e00"-"\u1e9b", 
    "\u1ea0"-"\u1ef9", 
    "\u1f00"-"\u1f15", 
    "\u1f18"-"\u1f1d", 
    "\u1f20"-"\u1f45", 
    "\u1f48"-"\u1f4d", 
    "\u1f50"-"\u1f57", 
    "\u1f59", 
    "\u1f5b", 
    "\u1f5d", 
    "\u1f5f"-"\u1f7d", 
    "\u1f80"-"\u1fb4", 
    "\u1fb6"-"\u1fbc", 
    "\u1fbe", 
    "\u1fc2"-"\u1fc4", 
    "\u1fc6"-"\u1fcc", 
    "\u1fd0"-"\u1fd3", 
    "\u1fd6"-"\u1fdb", 
    "\u1fe0"-"\u1fec", 
    "\u1ff2"-"\u1ff4", 
    "\u1ff6"-"\u1ffc", 
    "\u203f"-"\u2040", 
    "\u2054", 
    "\u2071", 
    "\u207f", 
    "\u20a0"-"\u20b1", 
    "\u2102", 
    "\u2107", 
    "\u210a"-"\u2113", 
    "\u2115", 
    "\u2119"-"\u211d", 
    "\u2124", 
    "\u2126", 
    "\u2128", 
    "\u212a"-"\u212d", 
    "\u212f"-"\u2131", 
    "\u2133"-"\u2139", 
    "\u213d"-"\u213f", 
    "\u2145"-"\u2149", 
    "\u2160"-"\u2183", 
    "\u3005"-"\u3007", 
    "\u3021"-"\u3029", 
    "\u3031"-"\u3035", 
    "\u3038"-"\u303c", 
    "\u3041"-"\u3096", 
    "\u309d"-"\u309f", 
    "\u30a1"-"\u30ff", 
    "\u3105"-"\u312c", 
    "\u3131"-"\u318e", 
    "\u31a0"-"\u31b7", 
    "\u31f0"-"\u31ff", 
    "\u3400"-"\u4db5", 
    "\u4e00"-"\u9fa5", 
    "\ua000"-"\ua48c", 
    "\uac00"-"\ud7a3", 
    "\ud801", //for supplementary characters suport
    "\ud802", //for supplementary characters suport
    "\uf900"-"\ufa2d", 
    "\ufa30"-"\ufa6a", 
    "\ufb00"-"\ufb06", 
    "\ufb13"-"\ufb17", 
    "\ufb1d", 
    "\ufb1f"-"\ufb28", 
    "\ufb2a"-"\ufb36", 
    "\ufb38"-"\ufb3c", 
    "\ufb3e", 
    "\ufb40"-"\ufb41", 
    "\ufb43"-"\ufb44", 
    "\ufb46"-"\ufbb1", 
    "\ufbd3"-"\ufd3d", 
    "\ufd50"-"\ufd8f", 
    "\ufd92"-"\ufdc7", 
    "\ufdf0"-"\ufdfc", 
    "\ufe33"-"\ufe34", 
    "\ufe4d"-"\ufe4f", 
    "\ufe69", 
    "\ufe70"-"\ufe74", 
    "\ufe76"-"\ufefc", 
    "\uff04", 
    "\uff21"-"\uff3a", 
    "\uff3f", 
    "\uff41"-"\uff5a", 
    "\uff65"-"\uffbe", 
    "\uffc2"-"\uffc7", 
    "\uffca"-"\uffcf", 
    "\uffd2"-"\uffd7", 
    "\uffda"-"\uffdc", 
    "\uffe0"-"\uffe1", 
    "\uffe5"-"\uffe6" 
    ] 
    >
| 
  < #PART_LETTER : 
    [ "*", 
    // all chars for which Character.isIdentifierPart is true
    "\u0000"-"\u0008", 
    "\u000e"-"\u001b", 
    "\u0024", // "$"
    "\u0030"-"\u0039", // "0"-"9"
    "\u0041"-"\u005a", // "A"-"Z"
    "\u005f", // "_"
    "\u0061"-"\u007a", // "a"-"z"
    "\u007f"-"\u009f", 
    "\u00a2"-"\u00a5", 
    "\u00aa", 
    "\u00ad", 
    "\u00b5", 
    "\u00ba", 
    "\u00c0"-"\u00d6", 
    "\u00d8"-"\u00f6", 
    "\u00f8"-"\u0236", 
    "\u0250"-"\u02c1", 
    "\u02c6"-"\u02d1", 
    "\u02e0"-"\u02e4", 
    "\u02ee", 
    "\u0300"-"\u0357", 
    "\u035d"-"\u036f", 
    "\u037a", 
    "\u0386", 
    "\u0388"-"\u038a", 
    "\u038c", 
    "\u038e"-"\u03a1", 
    "\u03a3"-"\u03ce", 
    "\u03d0"-"\u03f5", 
    "\u03f7"-"\u03fb", 
    "\u0400"-"\u0481", 
    "\u0483"-"\u0486", 
    "\u048a"-"\u04ce", 
    "\u04d0"-"\u04f5", 
    "\u04f8"-"\u04f9", 
    "\u0500"-"\u050f", 
    "\u0531"-"\u0556", 
    "\u0559", 
    "\u0561"-"\u0587", 
    "\u0591"-"\u05a1", 
    "\u05a3"-"\u05b9", 
    "\u05bb"-"\u05bd", 
    "\u05bf", 
    "\u05c1"-"\u05c2", 
    "\u05c4", 
    "\u05d0"-"\u05ea", 
    "\u05f0"-"\u05f2", 
    "\u0600"-"\u0603", 
    "\u0610"-"\u0615", 
    "\u0621"-"\u063a", 
    "\u0640"-"\u0658", 
    "\u0660"-"\u0669", 
    "\u066e"-"\u06d3", 
    "\u06d5"-"\u06dd", 
    "\u06df"-"\u06e8", 
    "\u06ea"-"\u06fc", 
    "\u06ff", 
    "\u070f"-"\u074a", 
    "\u074d"-"\u074f", 
    "\u0780"-"\u07b1", 
    "\u0901"-"\u0939", 
    "\u093c"-"\u094d", 
    "\u0950"-"\u0954", 
    "\u0958"-"\u0963", 
    "\u0966"-"\u096f", 
    "\u0981"-"\u0983", 
    "\u0985"-"\u098c", 
    "\u098f"-"\u0990", 
    "\u0993"-"\u09a8", 
    "\u09aa"-"\u09b0", 
    "\u09b2", 
    "\u09b6"-"\u09b9", 
    "\u09bc"-"\u09c4", 
    "\u09c7"-"\u09c8", 
    "\u09cb"-"\u09cd", 
    "\u09d7", 
    "\u09dc"-"\u09dd", 
    "\u09df"-"\u09e3", 
    "\u09e6"-"\u09f3", 
    "\u0a01"-"\u0a03", 
    "\u0a05"-"\u0a0a", 
    "\u0a0f"-"\u0a10", 
    "\u0a13"-"\u0a28", 
    "\u0a2a"-"\u0a30", 
    "\u0a32"-"\u0a33", 
    "\u0a35"-"\u0a36", 
    "\u0a38"-"\u0a39", 
    "\u0a3c", 
    "\u0a3e"-"\u0a42", 
    "\u0a47"-"\u0a48", 
    "\u0a4b"-"\u0a4d", 
    "\u0a59"-"\u0a5c", 
    "\u0a5e", 
    "\u0a66"-"\u0a74", 
    "\u0a81"-"\u0a83", 
    "\u0a85"-"\u0a8d", 
    "\u0a8f"-"\u0a91", 
    "\u0a93"-"\u0aa8", 
    "\u0aaa"-"\u0ab0", 
    "\u0ab2"-"\u0ab3", 
    "\u0ab5"-"\u0ab9", 
    "\u0abc"-"\u0ac5", 
    "\u0ac7"-"\u0ac9", 
    "\u0acb"-"\u0acd", 
    "\u0ad0", 
    "\u0ae0"-"\u0ae3", 
    "\u0ae6"-"\u0aef", 
    "\u0af1", 
    "\u0b01"-"\u0b03", 
    "\u0b05"-"\u0b0c", 
    "\u0b0f"-"\u0b10", 
    "\u0b13"-"\u0b28", 
    "\u0b2a"-"\u0b30", 
    "\u0b32"-"\u0b33", 
    "\u0b35"-"\u0b39", 
    "\u0b3c"-"\u0b43", 
    "\u0b47"-"\u0b48", 
    "\u0b4b"-"\u0b4d", 
    "\u0b56"-"\u0b57", 
    "\u0b5c"-"\u0b5d", 
    "\u0b5f"-"\u0b61", 
    "\u0b66"-"\u0b6f", 
    "\u0b71", 
    "\u0b82"-"\u0b83", 
    "\u0b85"-"\u0b8a", 
    "\u0b8e"-"\u0b90", 
    "\u0b92"-"\u0b95", 
    "\u0b99"-"\u0b9a", 
    "\u0b9c", 
    "\u0b9e"-"\u0b9f", 
    "\u0ba3"-"\u0ba4", 
    "\u0ba8"-"\u0baa", 
    "\u0bae"-"\u0bb5", 
    "\u0bb7"-"\u0bb9", 
    "\u0bbe"-"\u0bc2", 
    "\u0bc6"-"\u0bc8", 
    "\u0bca"-"\u0bcd", 
    "\u0bd7", 
    "\u0be7"-"\u0bef", 
    "\u0bf9", 
    "\u0c01"-"\u0c03", 
    "\u0c05"-"\u0c0c", 
    "\u0c0e"-"\u0c10", 
    "\u0c12"-"\u0c28", 
    "\u0c2a"-"\u0c33", 
    "\u0c35"-"\u0c39", 
    "\u0c3e"-"\u0c44", 
    "\u0c46"-"\u0c48", 
    "\u0c4a"-"\u0c4d", 
    "\u0c55"-"\u0c56", 
    "\u0c60"-"\u0c61", 
    "\u0c66"-"\u0c6f", 
    "\u0c82"-"\u0c83", 
    "\u0c85"-"\u0c8c", 
    "\u0c8e"-"\u0c90", 
    "\u0c92"-"\u0ca8", 
    "\u0caa"-"\u0cb3", 
    "\u0cb5"-"\u0cb9", 
    "\u0cbc"-"\u0cc4", 
    "\u0cc6"-"\u0cc8", 
    "\u0cca"-"\u0ccd", 
    "\u0cd5"-"\u0cd6", 
    "\u0cde", 
    "\u0ce0"-"\u0ce1", 
    "\u0ce6"-"\u0cef", 
    "\u0d02"-"\u0d03", 
    "\u0d05"-"\u0d0c", 
    "\u0d0e"-"\u0d10", 
    "\u0d12"-"\u0d28", 
    "\u0d2a"-"\u0d39", 
    "\u0d3e"-"\u0d43", 
    "\u0d46"-"\u0d48", 
    "\u0d4a"-"\u0d4d", 
    "\u0d57", 
    "\u0d60"-"\u0d61", 
    "\u0d66"-"\u0d6f", 
    "\u0d82"-"\u0d83", 
    "\u0d85"-"\u0d96", 
    "\u0d9a"-"\u0db1", 
    "\u0db3"-"\u0dbb", 
    "\u0dbd", 
    "\u0dc0"-"\u0dc6", 
    "\u0dca", 
    "\u0dcf"-"\u0dd4", 
    "\u0dd6", 
    "\u0dd8"-"\u0ddf", 
    "\u0df2"-"\u0df3", 
    "\u0e01"-"\u0e3a", 
    "\u0e3f"-"\u0e4e", 
    "\u0e50"-"\u0e59", 
    "\u0e81"-"\u0e82", 
    "\u0e84", 
    "\u0e87"-"\u0e88", 
    "\u0e8a", 
    "\u0e8d", 
    "\u0e94"-"\u0e97", 
    "\u0e99"-"\u0e9f", 
    "\u0ea1"-"\u0ea3", 
    "\u0ea5", 
    "\u0ea7", 
    "\u0eaa"-"\u0eab", 
    "\u0ead"-"\u0eb9", 
    "\u0ebb"-"\u0ebd", 
    "\u0ec0"-"\u0ec4", 
    "\u0ec6", 
    "\u0ec8"-"\u0ecd", 
    "\u0ed0"-"\u0ed9", 
    "\u0edc"-"\u0edd", 
    "\u0f00", 
    "\u0f18"-"\u0f19", 
    "\u0f20"-"\u0f29", 
    "\u0f35", 
    "\u0f37", 
    "\u0f39", 
    "\u0f3e"-"\u0f47", 
    "\u0f49"-"\u0f6a", 
    "\u0f71"-"\u0f84", 
    "\u0f86"-"\u0f8b", 
    "\u0f90"-"\u0f97", 
    "\u0f99"-"\u0fbc", 
    "\u0fc6", 
    "\u1000"-"\u1021", 
    "\u1023"-"\u1027", 
    "\u1029"-"\u102a", 
    "\u102c"-"\u1032", 
    "\u1036"-"\u1039", 
    "\u1040"-"\u1049", 
    "\u1050"-"\u1059", 
    "\u10a0"-"\u10c5", 
    "\u10d0"-"\u10f8", 
    "\u1100"-"\u1159", 
    "\u115f"-"\u11a2", 
    "\u11a8"-"\u11f9", 
    "\u1200"-"\u1206", 
    "\u1208"-"\u1246", 
    "\u1248", 
    "\u124a"-"\u124d", 
    "\u1250"-"\u1256", 
    "\u1258", 
    "\u125a"-"\u125d", 
    "\u1260"-"\u1286", 
    "\u1288", 
    "\u128a"-"\u128d", 
    "\u1290"-"\u12ae", 
    "\u12b0", 
    "\u12b2"-"\u12b5", 
    "\u12b8"-"\u12be", 
    "\u12c0", 
    "\u12c2"-"\u12c5", 
    "\u12c8"-"\u12ce", 
    "\u12d0"-"\u12d6", 
    "\u12d8"-"\u12ee", 
    "\u12f0"-"\u130e", 
    "\u1310", 
    "\u1312"-"\u1315", 
    "\u1318"-"\u131e", 
    "\u1320"-"\u1346", 
    "\u1348"-"\u135a", 
    "\u1369"-"\u1371", 
    "\u13a0"-"\u13f4", 
    "\u1401"-"\u166c", 
    "\u166f"-"\u1676", 
    "\u1681"-"\u169a", 
    "\u16a0"-"\u16ea", 
    "\u16ee"-"\u16f0", 
    "\u1700"-"\u170c", 
    "\u170e"-"\u1714", 
    "\u1720"-"\u1734", 
    "\u1740"-"\u1753", 
    "\u1760"-"\u176c", 
    "\u176e"-"\u1770", 
    "\u1772"-"\u1773", 
    "\u1780"-"\u17d3", 
    "\u17d7", 
    "\u17db"-"\u17dd", 
    "\u17e0"-"\u17e9", 
    "\u180b"-"\u180d", 
    "\u1810"-"\u1819", 
    "\u1820"-"\u1877", 
    "\u1880"-"\u18a9", 
    "\u1900"-"\u191c", 
    "\u1920"-"\u192b", 
    "\u1930"-"\u193b", 
    "\u1946"-"\u196d", 
    "\u1970"-"\u1974", 
    "\u1d00"-"\u1d6b", 
    "\u1e00"-"\u1e9b", 
    "\u1ea0"-"\u1ef9", 
    "\u1f00"-"\u1f15", 
    "\u1f18"-"\u1f1d", 
    "\u1f20"-"\u1f45", 
    "\u1f48"-"\u1f4d", 
    "\u1f50"-"\u1f57", 
    "\u1f59", 
    "\u1f5b", 
    "\u1f5d", 
    "\u1f5f"-"\u1f7d", 
    "\u1f80"-"\u1fb4", 
    "\u1fb6"-"\u1fbc", 
    "\u1fbe", 
    "\u1fc2"-"\u1fc4", 
    "\u1fc6"-"\u1fcc", 
    "\u1fd0"-"\u1fd3", 
    "\u1fd6"-"\u1fdb", 
    "\u1fe0"-"\u1fec", 
    "\u1ff2"-"\u1ff4", 
    "\u1ff6"-"\u1ffc", 
    "\u200c"-"\u200f", 
    "\u202a"-"\u202e", 
    "\u203f"-"\u2040", 
    "\u2054", 
    "\u2060"-"\u2063", 
    "\u206a"-"\u206f", 
    "\u2071", 
    "\u207f", 
    "\u20a0"-"\u20b1", 
    "\u20d0"-"\u20dc", 
    "\u20e1", 
    "\u20e5"-"\u20ea", 
    "\u2102", 
    "\u2107", 
    "\u210a"-"\u2113", 
    "\u2115", 
    "\u2119"-"\u211d", 
    "\u2124", 
    "\u2126", 
    "\u2128", 
    "\u212a"-"\u212d", 
    "\u212f"-"\u2131", 
    "\u2133"-"\u2139", 
    "\u213d"-"\u213f", 
    "\u2145"-"\u2149", 
    "\u2160"-"\u2183", 
    "\u3005"-"\u3007", 
    "\u3021"-"\u302f", 
    "\u3031"-"\u3035", 
    "\u3038"-"\u303c", 
    "\u3041"-"\u3096", 
    "\u3099"-"\u309a", 
    "\u309d"-"\u309f", 
    "\u30a1"-"\u30ff", 
    "\u3105"-"\u312c", 
    "\u3131"-"\u318e", 
    "\u31a0"-"\u31b7", 
    "\u31f0"-"\u31ff", 
    "\u3400"-"\u4db5", 
    "\u4e00"-"\u9fa5", 
    "\ua000"-"\ua48c", 
    "\uac00"-"\ud7a3", 
    "\ud801", //for supplementary characters suport
    "\ud802", //for supplementary characters suport
    "\ud834", //for supplementary characters suport
    "\udc00", //for supplementary characters suport
    "\udc01", //for supplementary characters suport
    "\udd7b", //for supplementary characters suport
    "\uf900"-"\ufa2d", 
    "\ufa30"-"\ufa6a", 
    "\ufb00"-"\ufb06", 
    "\ufb13"-"\ufb17", 
    "\ufb1d"-"\ufb28", 
    "\ufb2a"-"\ufb36", 
    "\ufb38"-"\ufb3c", 
    "\ufb3e", 
    "\ufb40"-"\ufb41", 
    "\ufb43"-"\ufb44", 
    "\ufb46"-"\ufbb1", 
    "\ufbd3"-"\ufd3d", 
    "\ufd50"-"\ufd8f", 
    "\ufd92"-"\ufdc7", 
    "\ufdf0"-"\ufdfc", 
    "\ufe00"-"\ufe0f", 
    "\ufe20"-"\ufe23", 
    "\ufe33"-"\ufe34", 
    "\ufe4d"-"\ufe4f", 
    "\ufe69", 
    "\ufe70"-"\ufe74", 
    "\ufe76"-"\ufefc", 
    "\ufeff", 
    "\uff04", 
    "\uff10"-"\uff19", 
    "\uff21"-"\uff3a", 
    "\uff3f", 
    "\uff41"-"\uff5a", 
    "\uff65"-"\uffbe", 
    "\uffc2"-"\uffc7", 
    "\uffca"-"\uffcf", 
    "\uffd2"-"\uffd7", 
    "\uffda"-"\uffdc", 
    "\uffe0"-"\uffe1", 
    "\uffe5"-"\uffe6", 
    "\ufff9"-"\ufffb" 
    ] 
    >
}

/* SEPARATORS */
TOKEN :
{
  < LPAREN : "(" >
| < RPAREN : ")" >
| < LBRACE : "{" >
| < RBRACE : "}" >
| < LBRACKET : "[" >
| < RBRACKET : "]" >
| < SEMICOLON : ";" >
| < COMMA : "," >
| < AT : "@" >
}

/* OPERATORS */
TOKEN :
{
  < ASSIGN : "=" >
| < LT : "<" >
| < BANG : "!" >
| < TILDE : "~" >
| < HOOK : "?" >
| < COLON : ":" >
| < EQ : "==" >
| < LE : "<=" >
| < GE : ">=" >
| < NE : "!=" >
| < SC_OR : "||" >
| < SC_AND : "&&" >
| < INCR : "++" >
| < DECR : "--" >
| < PLUS : "+" >
| < MINUS : "-" >
| < SLASH : "/" >
| < BIT_AND : "&" >
| < BIT_OR : "|" >
| < XOR : "^" >
| < REM : "%" >
| < LSHIFT : "<<" >
| < PLUSASSIGN : "+=" >
| < MINUSASSIGN : "-=" >
| < STARASSIGN : "*=" >
| < SLASHASSIGN : "/=" >
| < ANDASSIGN : "&=" >
| < ORASSIGN : "|=" >
| < XORASSIGN : "^=" >
| < REMASSIGN : "%=" >
| < LSHIFTASSIGN : "<<=" >
| < RSIGNEDSHIFTASSIGN : ">>=" >
| < RUNSIGNEDSHIFTASSIGN : ">>>=" >
| < ELLIPSIS : "..." >
}

/* >'s need special attention due to generics syntax. */
TOKEN :
{
  < RUNSIGNEDSHIFT: ">>>" >
  {
     matchedToken.kind = GT;
     matchedToken.realKind = RUNSIGNEDSHIFT;
     input_stream.backup(2);
  }
| < RSIGNEDSHIFT: ">>" >
  {
     matchedToken.kind = GT;
     matchedToken.realKind = RSIGNEDSHIFT;
     input_stream.backup(1);
  }
| < GT: ">" >
}

/* .'s need special attention due to ApsectJ syntax. */
TOKEN :
{
  < DOTDOT : ".." >
| < DOT : "." >
}

PositionString AnyIDPatternWithoutDot() :
{
  String id;
  int line, column;
}
{
  (
    < IDPATTERN >
  | < EVENT >
  | < CREATION >
  | < UNSYNC >
  | < DECENT >
  | < PERTHREAD >
  | < SUFFIX >
  | < BEFORE >
  | < AFTER >
  | < AROUND >
  | < CALL >
  | < EXEC >
  | < GET >
  | < SET >
  | < TARGET >
  | < WITHIN >
  | < ARGS >
  | < THREAD >
  | < THREADNAME >
  | < THREADBLOCKED >
  | < CONDITION >
  | < COUNTCOND >
  | < CFLOW >
  | < CFLOWBELOW >
  | < RETURNING >
  | < THROWING >
  | < ENDPROGRAM >
  | < ENDTHREAD >
  | < ENDOBJECT >
  | < STARTTHREAD >
  )
  {
    line = token.beginLine;
    column = token.beginColumn;
    id = token.image;
  }
  {
    return new PositionString(line, column, id);
  }
}

PointCut PointCut() :
{
  PointCut ret;
  List < PointCut > pointcuts = new ArrayList < PointCut > ();
  int line, column;
}
{
  ret = AndPointCut()
  {
    line = ret.getBeginLine();
    column = ret.getBeginColumn();
    pointcuts.add(ret);
  }
  (
    "||" ret = AndPointCut()
    {
      pointcuts.add(ret);
    }
  )*
  {
    if (pointcuts.size() == 1) return pointcuts.get(0);
    else return new CombinedPointCut(line, column, "||", pointcuts);
  }
}

PointCut AndPointCut() :
{
  PointCut ret;
  List < PointCut > pointcuts = new ArrayList < PointCut > ();
  int line, column;
}
{
  ret = NotPointCut()
  {
    line = ret.getBeginLine();
    column = ret.getBeginColumn();
    pointcuts.add(ret);
  }
  (
    "&&" ret = NotPointCut()
    {
      pointcuts.add(ret);
    }
  )*
  {
    if (pointcuts.size() == 1) return pointcuts.get(0);
    else return new CombinedPointCut(line, column, "&&", pointcuts);
  }
}

PointCut NotPointCut() :
{
  PointCut ret;
  int line, column;
}
{
  (
    ret = BasePointCut()
  |
    (
      "!" ret = BasePointCut()
      {
        line = ret.getBeginLine();
        column = ret.getBeginColumn();
        ret = new NotPointCut(line, column, ret);
      }
    )
  )
  {
    return ret;
  }
}

PointCut BasePointCut() :
{
  PointCut ret;
}
{
  //LOOKAHEAD(1) 
  (
    ret = MethodPointCut()
  | ret = FieldPointCut()
  | ret = ThisPointCut()
  | ret = ArgsPointCut()
  | ret = TargetPointCut()
  | ret = WithinPointCut()
  | ret = ThreadPointCut()
  | ret = ThreadNamePointCut()
  | ret = ThreadBlockedPointCut()
  | ret = IFPointCut()
  | ret = ConditionPointCut()
  | ret = CountCondPointCut()
  | ret = CFlowPointCut()
  | ret = IDPointCut()
  | "(" ret = PointCut() ")"
  | ret = EndProgramPointCut()
  | ret = EndThreadPointCut()
  | ret = StartThreadPointCut()
  | ret = EndObjectPointCut()
  | ret = HandlerPointCut()
  | ret = EventPointCut()
  )
  {
    return ret;
  }
}

PointCut HandlerPointCut() :
{
  String type;
  int line, column;
  String specName;
  String referenceElement;
  String state = null;
}
{
  "handler"
  {
    line = token.beginLine;
    column = token.beginColumn;
    type = token.image;
  }
  "(" < IDPATTERN >
  {
    specName = token.image;
  }
  (
    "." < IDPATTERN >
    {
      referenceElement = token.image;
    }
    "@" < IDPATTERN >
    {
      state = token.image;
    }
  | 
    "@" < IDPATTERN >
    {
      referenceElement = specName;
      specName = "";
      state = token.image;
    }
  )
  ")"
  {
    return new HandlerPointCut(line, column, type, specName, referenceElement, state);
  }
}

PointCut EventPointCut() :
{
  String type;
  int line, column;
  String specName = null;
  String referenceElement;
  //String state;
  List < String > parameters;
}
{
  "event"
  {
    line = token.beginLine;
    column = token.beginColumn;
    type = token.image;
  }
  "(" < IDPATTERN >
  {
    referenceElement = token.image;
  }
  [
    "." < IDPATTERN >
    {
      specName = referenceElement;
      referenceElement = token.image;
    }
  ]
  parameters = ExtParameters() 
  ")"
  {
    return new EventPointCut(line, column, type, specName, referenceElement, parameters);
  }
}

List < String > ExtParameters() :
{
  List < String > parameters = new ArrayList < String > ();
}
{
  "("
  [
    < IDPATTERN >
    {
      parameters.add(token.image);
    }
    [
      "," < IDPATTERN >
      {
        parameters.add(token.image);
      }
    ]
  ]
  ")"
  {
    return parameters;
  }
}

PointCut MethodPointCut() :
{
  String type;
  int line, column;
  MethodPattern methodSig;
}
{
  (
    "call"
  | "execution"
  )
  {
    line = token.beginLine;
    column = token.beginColumn;
    type = token.image;
  }
  "(" methodSig = MethodPattern() ")"
  {
    return new MethodPointCut(line, column, type, methodSig);
  }
}

PointCut FieldPointCut() :
{
  String type;
  int line, column;
  FieldPattern pattern;
}
{
  (
    "set"
  | "get"
  )
  {
    line = token.beginLine;
    column = token.beginColumn;
    type = token.image;
  }
  "(" pattern = FieldPattern() ")"
  {
    return new FieldPointCut(line, column, type, pattern);
  }
}

PointCut ThisPointCut() :
{
  String type;
  int line, column;
  TypePattern id;
}
{
  "this"
  {
    line = token.beginLine;
    column = token.beginColumn;
    type = token.image;
  }
  "(" id = TypePattern() ")"
  {
    return new ThisPointCut(line, column, type, id);
  }
}

PointCut TargetPointCut() :
{
  String type;
  int line, column;
  TypePattern id;
}
{
  "target"
  {
    line = token.beginLine;
    column = token.beginColumn;
    type = token.image;
  }
  "(" id = TypePattern() ")"
  {
    return new TargetPointCut(line, column, type, id);
  }
}

PointCut ArgsPointCut() :
{
  String type;
  int line, column;
  List < TypePattern > parameters;
}
{
  "args"
  {
    line = token.beginLine;
    column = token.beginColumn;
    type = token.image;
  }
  parameters = ExtParameterTypes()
  {
    return new ArgsPointCut(line, column, type, parameters);
  }
}

PointCut WithinPointCut() :
{
  String type;
  int line, column;
  TypePattern pattern;
  String name;
}
{
  "within"
  {
    line = token.beginLine;
    column = token.beginColumn;
    type = token.image;
  }
  "(" pattern = TypePattern() ")"
  {
    return new WithinPointCut(line, column, type, pattern);
  }
}

PointCut ThreadPointCut() :
{
  int line, column;
  PositionString id;
}
{
  "thread"
  {
    line = token.beginLine;
    column = token.beginColumn;
  }
  "(" id = AnyIdPattern() ")"
  {
    return new ThreadPointCut(line, column, id.str);
  }
}

PointCut ThreadNamePointCut() :
{
  int line, column;
  PositionString id;
}
{
  "threadName"
  {
    line = token.beginLine;
    column = token.beginColumn;
  }
  "(" id = QuotesAndAnyIdPattern() ")"
  {
    return new ThreadNamePointCut(line, column, id.str);
  }
}

PointCut ThreadBlockedPointCut() :
{
  int line, column;
  PositionString id;
}
{
  "threadBlocked"
  {
    line = token.beginLine;
    column = token.beginColumn;
  }
  "(" id = QuotesAndAnyIdPattern() ")"
  {
    return new ThreadBlockedPointCut(line, column, id.str);
  }
}

PointCut EndProgramPointCut() :
{
  int line, column;
}
{
  "endProgram"
  {
    line = token.beginLine;
    column = token.beginColumn;
  }
  "(" ")"
  {
    return new EndProgramPointCut(line, column);
  }
}

PointCut EndThreadPointCut() :
{
  int line, column;
}
{
  "endThread"
  {
    line = token.beginLine;
    column = token.beginColumn;
  }
  "(" ")"
  {
    return new EndThreadPointCut(line, column);
  }
}

PointCut StartThreadPointCut() :
{
  int line, column;
}
{
  "startThread"
  {
    line = token.beginLine;
    column = token.beginColumn;
  }
  "(" ")"
  {
    return new StartThreadPointCut(line, column);
  }
}

PointCut EndObjectPointCut() :
{
  int line, column;
  TypePattern targetType;
  PositionString id = null;
}
{
  "endObject"
  {
    line = token.beginLine;
    column = token.beginColumn;
  }
  "(" targetType = TypePattern() id = AnyIdPattern() ")"
  {
    return new EndObjectPointCut(line, column, targetType, id.str);
  }
}

PointCut ConditionPointCut() :
{
  String type;
  int line, column;
  Expression expr;
}
{
  "condition"
  {
    line = token.beginLine;
    column = token.beginColumn;
    type = token.image;
  }
  "(" expr = Expression() ")"
  {
    return new ConditionPointCut(line, column, type, expr);
  }
}

PointCut CountCondPointCut() :
{
  String type;
  int line, column;
  Expression expr;
}
{
  "countCond"
  {
    line = token.beginLine;
    column = token.beginColumn;
    type = token.image;
  }
  "(" expr = Expression() ")"
  {
    return new CountCondPointCut(line, column, type, expr);
  }
}

PointCut CFlowPointCut() :
{
  PointCut p;
  int line, column;
  String type;
}
{
  (
    "cflow"
  | "cflowbelow"
  )
  {
    line = token.beginLine;
    column = token.beginColumn;
    type = token.image;
  }
  "(" p = PointCut() ")"
  {
    return new CFlowPointCut(line, column, type, p);
  }
}

PointCut IFPointCut() :
{
  String type;
  int line, column;
  Expression expr;
}
{
  "if"
  {
    line = token.beginLine;
    column = token.beginColumn;
    type = token.image;
  }
  "(" expr = Expression() ")"
  {
    return new IFPointCut(line, column, type, expr);
  }
}

PointCut IDPointCut() :
{
  int line, column;
  List < TypePattern > parameters;
  String id;
  PositionString name = null;
}
{
  name = IdPattern()
  {
    line = name.line;
    column = name.column;
    id = name.str;
  }
  parameters = ExtParameterTypes()
  {
    return new IDPointCut(line, column, id, parameters);
  }
}

/* the pattern definitions come from: http://www.eclipse.org/aspectj/doc/released/progguide/semantics-pointcuts.html#pattern-summary  */
FieldPattern FieldPattern() :
{
  Modifier mod = new Modifier(0, 0, 0, 0);
  TypePattern retType = null;
  TypePattern owner = null;
  PositionString name = null;
  int line =-1, column =-1;
}
{
  [
    LOOKAHEAD(ExtModifiers())
    mod = ExtModifiers()
    {
      line = mod.line;
      column = mod.column;
    }
  ]
  retType = TypePattern()
  {
    if (line == - 1)
    {
      line = retType.getBeginLine();
      column = retType.getBeginColumn();
    }
  }
  [
    LOOKAHEAD(TypePattern() ".")
    owner = TypePattern() "."
  ]
  name = AnyIdPattern()
  {
    return new FieldPattern(line, column, mod.modifiers, mod.not_modifiers, retType, owner, name.str);
  }
}

MethodPattern MethodPattern() :
{
  Modifier mod = new Modifier(0, 0, 0, 0);
  TypePattern retType = null;
  TypePattern owner = null;
  PositionString name;
  List < TypePattern > parameters;
  List < TypePattern > throwTypes = null;
  int line =-1, column =-1;
}
{
  [
    LOOKAHEAD(ExtModifiers())
    mod = ExtModifiers()
    {
      line = mod.line;
      column = mod.column;
    }
  ]
  // for constructors, there is no return type
  [
    LOOKAHEAD(TypePattern())
    retType = TypePattern()
    {
      if (line == - 1)
      {
        line = retType.getBeginLine();
        column = retType.getBeginColumn();
      }
    }
  ]
  (
    LOOKAHEAD("." < NEW >)
    "." < NEW >
    {
      name = new PositionString(token.beginLine, token.beginColumn, token.image);
      owner = retType;
      retType = null;
    }
  |
    [
      LOOKAHEAD(TypePatternEndingDot()
    | IdPatternWithDot())
      owner = TypePatternEndingDot()
      {
        if (line == - 1)
        {
          line = owner.getBeginLine();
          column = owner.getBeginColumn();
        }
      }
    ]
    name = AnyIdPattern()
    {
      if (line == - 1)
      {
        line = name.line;
        column = name.column;
      }
    }
  )
  parameters = ExtParameterTypes() [ "throws" throwTypes = TypePatterns() ]
  {
    return new MethodPattern(line, column, mod.modifiers, mod.not_modifiers, retType, owner, name.str, parameters, throwTypes);
  }
}

Modifier ExtModifiers() :
{
  int [ ] modifiers =
  {
    0, 0
  }
  ;
  int i = 0;
  int line =-1;
  int column =-1;
}
{
  (
    (
      LOOKAHEAD(2)

      [
        "!"
        {
          i = 1;
          if (line == - 1)
          {
            line = token.beginLine;
            column = token.beginColumn;
          }
        }
      ]
      (
        "public"
        {
          if (line == - 1)
          {
            line = token.beginLine;
            column = token.beginColumn;
          }
          modifiers [ i ] = AspectJModifierSet.addModifier(modifiers [ i ], AspectJModifierSet.PUBLIC, token);
        }
      | "static"
        {
          if (line == - 1)
          {
            line = token.beginLine;
            column = token.beginColumn;
          }
          modifiers [ i ] = AspectJModifierSet.addModifier(modifiers [ i ], AspectJModifierSet.STATIC, token);
        }
      | "protected"
        {
          if (line == - 1)
          {
            line = token.beginLine;
            column = token.beginColumn;
          }
          modifiers [ i ] = AspectJModifierSet.addModifier(modifiers [ i ], AspectJModifierSet.PROTECTED, token);
        }
      | "private"
        {
          if (line == - 1)
          {
            line = token.beginLine;
            column = token.beginColumn;
          }
          modifiers [ i ] = AspectJModifierSet.addModifier(modifiers [ i ], AspectJModifierSet.PRIVATE, token);
        }
      | "final"
        {
          if (line == - 1)
          {
            line = token.beginLine;
            column = token.beginColumn;
          }
          modifiers [ i ] = AspectJModifierSet.addModifier(modifiers [ i ], AspectJModifierSet.FINAL, token);
        }
      | "abstract"
        {
          if (line == - 1)
          {
            line = token.beginLine;
            column = token.beginColumn;
          }
          modifiers [ i ] = AspectJModifierSet.addModifier(modifiers [ i ], AspectJModifierSet.ABSTRACT, token);
        }
      | "synchronized"
        {
          if (line == - 1)
          {
            line = token.beginLine;
            column = token.beginColumn;
          }
          modifiers [ i ] = AspectJModifierSet.addModifier(modifiers [ i ], AspectJModifierSet.SYNCHRONIZED, token);
        }
      | "native"
        {
          if (line == - 1)
          {
            line = token.beginLine;
            column = token.beginColumn;
          }
          modifiers [ i ] = AspectJModifierSet.addModifier(modifiers [ i ], AspectJModifierSet.NATIVE, token);
        }
      | "transient"
        {
          if (line == - 1)
          {
            line = token.beginLine;
            column = token.beginColumn;
          }
          modifiers [ i ] = AspectJModifierSet.addModifier(modifiers [ i ], AspectJModifierSet.TRANSIENT, token);
        }
      | "volatile"
        {
          if (line == - 1)
          {
            line = token.beginLine;
            column = token.beginColumn;
          }
          modifiers [ i ] = AspectJModifierSet.addModifier(modifiers [ i ], AspectJModifierSet.VOLATILE, token);
        }
      | "strictfp"
        {
          if (line == - 1)
          {
            line = token.beginLine;
            column = token.beginColumn;
          }
          modifiers [ i ] = AspectJModifierSet.addModifier(modifiers [ i ], AspectJModifierSet.STRICTFP, token);
        }
      )
      {
        i = 0;
      }
    )+
  )
  {
    return new Modifier(modifiers [ 0 ], modifiers [ 1 ], line, column);
  }
}

List < TypePattern > ExtParameterTypes():
{
  List < TypePattern > parameters = new ArrayList < TypePattern > ();
}
{
  "(" [ parameters = TypePatterns() ] ")"
  {
    return parameters;
  }
}

List < TypePattern > TypePatterns() :
{
  List < TypePattern > typelist = new ArrayList < TypePattern > ();
  TypePattern t;
}
{
  t = TypeOrDotdot()
  {
    typelist.add(t);
  }
  (
    "," t = TypeOrDotdot()
    {
      typelist.add(t);
    }
  )*
  {
    return typelist;
  }
}

TypePattern TypeOrDotdot() :
{
  TypePattern t = null;
}
{
  (
    t = TypePattern()
  | ".."
    {
      t = new WildcardParameter(token.beginLine, token.beginColumn);
    }
  )
  {
    return t;
  }
}

TypePattern TypePattern() :
{
  List < TypePattern > types = new ArrayList < TypePattern > ();
  TypePattern t;
  int line, column;
}
{
  t = AndTypePattern()
  {
    line = t.getBeginLine();
    column = t.getBeginColumn();
    types.add(t);
  }
  (
    "||" t = AndTypePattern()
    {
      types.add(t);
    }
  )*
  {
    if (types.size() == 1) return t;
    else return new CombinedTypePattern(line, column, "||", types);
  }
}

TypePattern AndTypePattern() :
{
  List < TypePattern > types = new ArrayList < TypePattern > ();
  TypePattern t;
  int line, column;
}
{
  t = NotTypePattern()
  {
    line = t.getBeginLine();
    column = t.getBeginColumn();
    types.add(t);
  }
  (
    "&&" t = NotTypePattern()
    {
      types.add(t);
    }
  )*
  {
    if (types.size() == 1) return t;
    else return new CombinedTypePattern(line, column, "&&", types);
  }
}

TypePattern NotTypePattern() :
{
  TypePattern t;
  int line =-1, column =-1;
}
{
  [
    "!"
    {
      line = token.beginLine;
      column = token.beginColumn;
    }
  ]
  t = BaseTypePattern()
  {
    if (line == - 1) return t;
    else
    {
      new NotTypePattern(line, column, t);
    }
  }
}

TypePattern BaseTypePattern() :
{
  PositionString id = null;
  TypePattern t = null;
  int line, column;
  PrimitiveType type = null;
  String s;
}
{
  (
    "("
    {
      line = token.beginLine;
      column = token.beginColumn;
    }
    t = TypePattern() ")"
  | type = PrimitiveType()
    {
      line = type.getBeginLine();
      column = type.getBeginColumn();
      s = type.toString();
    }
    ("[" "]"
    {
      s += "[]";
    }
    )*
    {
      t = new BaseTypePattern(line, column, s);
    }
  | "void"
    {
      line = token.beginLine;
      column = token.beginColumn;
      t = new BaseTypePattern(line, column, "void");
    }
  | id = IdPattern()
    [
      "+"
      {
        id.str += "+";
      }
    ]
    ("[" "]"
    {
      id.str += "[]";
    }
    )*
  )
  {
    if (t == null) t = new BaseTypePattern(id.line, id.column, id.str);
    return t;
  }
}

PositionString QuotesAndAnyIdPattern() :
{
  PositionString id;
  String text;
  int line, column;
}
{
  (
    ( <STRING_LITERAL>
    {
	text = token.image;
    }
    )
    | ( id = AnyIdPattern()
    {
        text = id.str;
    }
    )
  )
  {
    line = token.beginLine;
    column = token.beginColumn;
    return new PositionString(line, column, text);
  }
}


PositionString AnyIdPattern() :
{
  String id;
  int line, column;
}
{
  (
    < IDPATTERN >
  | < NEW >
  | < EVENT >
  | < CREATION >
  | < UNSYNC >
  | < DECENT >
  | < PERTHREAD >
  | < SUFFIX >
  | < BEFORE >
  | < AFTER >
  | < AROUND >
  | < CALL >
  | < EXEC >
  | < GET >
  | < SET >
  | < TARGET >
  | < WITHIN >
  | < ARGS >
  | < THREAD >
  | < THREADNAME >
  | < THREADBLOCKED >
  | < CONDITION >
  | < COUNTCOND >
  | < CFLOW >
  | < CFLOWBELOW >
  | < RETURNING >
  | < THROWING >
  | < ENDPROGRAM >
  | < ENDTHREAD >
  | < ENDOBJECT >
  | < STARTTHREAD >
  )
  {
    line = token.beginLine;
    column = token.beginColumn;
    id = token.image;
  }
  (
    LOOKAHEAD(2)
    (
      "."
    | ".."
    )
    {
      id += token.image;
    }
    (
      < IDPATTERN >
    | < NEW >
    | < EVENT >
    | < CREATION >
    | < UNSYNC >
    | < DECENT >
    | < PERTHREAD >
    | < SUFFIX >
    | < BEFORE >
    | < AFTER >
    | < AROUND >
    | < CALL >
    | < EXEC >
    | < GET >
    | < SET >
    | < TARGET >
    | < WITHIN >
    | < ARGS >
    | < THREAD >
    | < THREADNAME >
    | < THREADBLOCKED >
    | < CONDITION >
    | < COUNTCOND >
    | < CFLOW >
    | < CFLOWBELOW >
    | < RETURNING >
    | < THROWING >
    | < ENDPROGRAM >
    | < ENDTHREAD >
    | < ENDOBJECT >
    | < STARTTHREAD >
    )
    {
      id += token.image;
    }
  )*
  {
    return new PositionString(line, column, id);
  }
}

PositionString IdPattern() :
{
  String id;
  int line, column;
}
{
  < IDPATTERN >
  {
    line = token.beginLine;
    column = token.beginColumn;
    id = token.image;
  }
  (
    LOOKAHEAD(2)
    (
      "."
    | ".."
    )
    {
      id += token.image;
    }
    < IDPATTERN >
    {
      id += token.image;
    }
  )*
  {
    return new PositionString(line, column, id);
  }
}

TypePattern TypePatternEndingDot() :
{
  List < TypePattern > types = new ArrayList < TypePattern > ();
  TypePattern t;
  int line, column;
}
{
  t = AndTypePattern2()
  {
    line = t.getBeginLine();
    column = t.getBeginColumn();
    types.add(t);
  }
  (
    "||" t = AndTypePattern2()
    {
      types.add(t);
    }
  )*
  "."
  {
    if (types.size() == 1) return t;
    else return new CombinedTypePattern(line, column, "||", types);
  }
}

TypePattern AndTypePattern2() :
{
  List < TypePattern > types = new ArrayList < TypePattern > ();
  TypePattern t;
  int line, column;
}
{
  t = NotTypePattern2()
  {
    line = t.getBeginLine();
    column = t.getBeginColumn();
    types.add(t);
  }
  (
    "&&" t = NotTypePattern2()
    {
      types.add(t);
    }
  )*
  {
    if (types.size() == 1) return t;
    else return new CombinedTypePattern(line, column, "&&", types);
  }
}

TypePattern NotTypePattern2() :
{
  TypePattern t;
  int line =-1, column =-1;
}
{
  [
    "!"
    {
      line = token.beginLine;
      column = token.beginColumn;
    }
  ]
  t = BaseTypePattern2()
  {
    if (line == - 1) return t;
    else
    {
      new NotTypePattern(line, column, t);
    }
  }
}

TypePattern BaseTypePattern2() :
{
  PositionString id = null;
  TypePattern t = null;
  int line, column;
}
{
  (
    "("
    {
      line = token.beginLine;
      column = token.beginColumn;
    }
    t = TypePattern() ")"
  | id = IdPattern2()
    [
      "+"
      {
        id.str += "+";
      }
    ]
    ("[" "]"
    {
      {
        id.str += "[]";
      }
    }
    )*
  )
  {
    if (t == null) t = new BaseTypePattern(id.line, id.column, id.str);
    return t;
  }
}

PositionString IdPattern2() :
{
  String id;
  int line, column;
}
{
  < IDPATTERN >
  {
    line = token.beginLine;
    column = token.beginColumn;
    id = token.image;
  }
  (
    LOOKAHEAD(("."
  | "..") < IDPATTERN > ".")
    (
      "."
    | ".."
    )
    {
      id += token.image;
    }
    < IDPATTERN >
    {
      id += token.image;
    }
  )*
  {
    return new PositionString(line, column, id);
  }
}

PositionString IdPatternWithDot() :
{
  String id;
  int line, column;
}
{
  < IDPATTERN >
  {
    line = token.beginLine;
    column = token.beginColumn;
    id = token.image;
  }
  (
    "."
  | ".."
  )
  {
    id += token.image;
  }
  < IDPATTERN >
  {
    id += token.image;
  }
  (
    LOOKAHEAD(("."
  | "..") < IDPATTERN > ".")
    (
      "."
    | ".."
    )
    {
      id += token.image;
    }
    < IDPATTERN >
    {
      id += token.image;
    }
  )*
  {
    return new PositionString(line, column, id);
  }
}

Expression VariableInitializer() :
{
  Expression ret;
}
{
  (
    ret = ArrayInitializer()
  | ret = Expression()
  )
  {
    return ret;
  }
}

ArrayInitializerExpr ArrayInitializer() :
{
  List values = null;
  Expression val;
  int line;
  int column;
}
{
  "{"
  {
    line = token.beginLine;
    column = token.beginColumn;
  }
  [
    val = VariableInitializer()
    {
      values = add(values, val);
    }
    (
      LOOKAHEAD(2)
      "," val = VariableInitializer()
      {
        values = add(values, val);
      }
    )*
  ]
  [ "," ] "}"
  {
    return new ArrayInitializerExpr(line, column, values);
  }
}

ExplicitConstructorInvocationStmt ExplicitConstructorInvocation() :
{
  boolean isThis = false;
  List args;
  Expression expr = null;
  List typeArgs = null;
  int line =-1;
  int column = 0;
}
{
  (
    LOOKAHEAD([ TypeArguments() ] "this" "(")

    [
      typeArgs = TypeArguments()
      {
        line = ((Type)typeArgs.get(0)).getBeginLine();
        column = ((Type) typeArgs.get(0)).getBeginColumn();
      }
    ]
    "this"
    {
      if (line == - 1)
      {
        line = token.beginLine;
        column = token.beginColumn;
      }
      isThis = true;
    }
    args = Arguments() ";"
  |
    [
      LOOKAHEAD(PrimaryExpressionWithoutSuperSuffix() ".")
      expr = PrimaryExpressionWithoutSuperSuffix() "."
      {
        line = expr.getBeginLine();
        column = expr.getBeginColumn();
      }
    ]
    [
      typeArgs = TypeArguments()
      {
        if (line == - 1)
        {
          line = ((Type) typeArgs.get(0)).getBeginLine();
          column = ((Type) typeArgs.get(0)).getBeginColumn();
        }
      }
    ]
    "super"
    {
      if (line == - 1)
      {
        line = token.beginLine;
        column = token.beginColumn;
      }
    }
    args = Arguments() ";"
  )
  {
    return new ExplicitConstructorInvocationStmt(line, column, typeArgs, isThis, expr, args);
  }
}

/*
 * Type, name and expression syntax follows.
 */
Type Type() :
{
  Type ret;
}
{
  (
    LOOKAHEAD(2)
    ret = ReferenceType()
  | ret = PrimitiveType()
  | "void"
    {
      ret = new VoidType(token.beginLine, token.beginColumn);
    }
  )
  {
    return ret;
  }
}

ReferenceType ReferenceType() :
{
  Type type;
  int arrayCount = 0;
}
{
  (
    type = PrimitiveType()
    (
      LOOKAHEAD(2)
      "[" "]"
      {
        arrayCount++;
      }
    )+
  | type = ClassOrInterfaceType()
    (
      LOOKAHEAD(2)
      "[" "]"
      {
        arrayCount++;
      }
    )*
  )
  {
    return new ReferenceType(type.getBeginLine(), type.getBeginColumn(), type, arrayCount);
  }
}

ClassOrInterfaceType ClassOrInterfaceType() :
{
  ClassOrInterfaceType ret;
  String name;
  List typeArgs = null;
  int line;
  int column;
}
{
  < IDPATTERN >
  {
    line = token.beginLine;
    column = token.beginColumn;
  }
  {
    name = token.image;
  }
  [
    LOOKAHEAD(2)
    typeArgs = TypeArguments()
  ]
  {
    ret = new ClassOrInterfaceType(line, column, null, name, typeArgs);
  }
  (
    LOOKAHEAD(2)
    "." < IDPATTERN >
    {
      name = token.image;
    }
    [
      LOOKAHEAD(2)
      typeArgs = TypeArguments()
    ]
    {
      ret = new ClassOrInterfaceType(line, column, ret, name, typeArgs);
    }
  )*
  {
    return ret;
  }
}

List TypeArguments() :
{
  List ret = new LinkedList();
  Type type;
}
{
  "<" type = TypeArgument()
  {
    ret.add(type);
  }
  (
    "," type = TypeArgument()
    {
      ret.add(type);
    }
  )*
  ">"
  {
    return ret;
  }
}

Type TypeArgument() :
{
  Type ret;
}
{
  (
    ret = ReferenceType()
  | ret = Wildcard()
  )
  {
    return ret;
  }
}

WildcardType Wildcard() :
{
  ReferenceType ext = null;
  ReferenceType sup = null;
  int line;
  int column;
}
{
  "?"
  {
    line = token.beginLine;
    column = token.beginColumn;
  }
  [
    "extends" ext = ReferenceType()
  | "super" sup = ReferenceType()
  ]
  {
    return new WildcardType(line, column, ext, sup);
  }
}

PrimitiveType PrimitiveType() :
{
  PrimitiveType ret;
}
{
  (
    "boolean"
    {
      ret = new PrimitiveType(token.beginLine, token.beginColumn, PrimitiveType.Primitive.Boolean);
    }
  | "char"
    {
      ret = new PrimitiveType(token.beginLine, token.beginColumn, PrimitiveType.Primitive.Char);
    }
  | "byte"
    {
      ret = new PrimitiveType(token.beginLine, token.beginColumn, PrimitiveType.Primitive.Byte);
    }
  | "short"
    {
      ret = new PrimitiveType(token.beginLine, token.beginColumn, PrimitiveType.Primitive.Short);
    }
  | "int"
    {
      ret = new PrimitiveType(token.beginLine, token.beginColumn, PrimitiveType.Primitive.Int);
    }
  | "long"
    {
      ret = new PrimitiveType(token.beginLine, token.beginColumn, PrimitiveType.Primitive.Long);
    }
  | "float"
    {
      ret = new PrimitiveType(token.beginLine, token.beginColumn, PrimitiveType.Primitive.Float);
    }
  | "double"
    {
      ret = new PrimitiveType(token.beginLine, token.beginColumn, PrimitiveType.Primitive.Double);
    }
  )
  {
    return ret;
  }
}

Type ResultType() :
{
  Type ret;
}
{
  (
    ret = Type()
  )
  {
    return ret;
  }
}

NameExpr Name() :
/*
 * A lookahead of 2 is required below since "Name" can be followed
 * by a ".*" when used in the context of an "ImportDeclaration".
 */
{
  NameExpr ret;
}
{
  < IDPATTERN >
  {
    ret = new NameExpr(token.beginLine, token.beginColumn, token.image);
  }
  (
    LOOKAHEAD(2)
    "." < IDPATTERN >
    {
      ret = new QualifiedNameExpr(token.beginLine, token.beginColumn, ret, token.image);
    }
  )*
  {
    return ret;
  }
}

List NameList() :
{
  List ret = new LinkedList();
  NameExpr name;
}
{
  name = Name()
  {
    ret.add(name);
  }
  (
    "," name = Name()
    {
      ret.add(name);
    }
  )*
  {
    return ret;
  }
}

/*
 * Expression syntax follows.
 */
Expression Expression() :
/*
 * This expansion has been written this way instead of:
 *   Assignment() | ConditionalExpression()
 * for performance reasons.
 * However, it is a weakening of the grammar for it allows the LHS of
 * assignments to be any conditional expression whereas it can only be
 * a primary expression.  Consider adding a semantic predicate to work
 * around this.
 */
{
  Expression ret;
  AssignExpr.Operator op;
  Expression value;
}
{
  ret = ConditionalExpression()
  [
    LOOKAHEAD(2)
    op = AssignmentOperator() value = Expression()
    {
      ret = new AssignExpr(ret.getBeginLine(), ret.getBeginColumn(), ret, value, op);
    }
  ]
  {
    return ret;
  }
}

AssignExpr.Operator AssignmentOperator() :
{
  AssignExpr.Operator ret;
}
{
  (
    "="
    {
      ret = AssignExpr.Operator.assign;
    }
  | "*="
    {
      ret = AssignExpr.Operator.star;
    }
  | "/="
    {
      ret = AssignExpr.Operator.slash;
    }
  | "%="
    {
      ret = AssignExpr.Operator.rem;
    }
  | "+="
    {
      ret = AssignExpr.Operator.plus;
    }
  | "-="
    {
      ret = AssignExpr.Operator.minus;
    }
  | "<<="
    {
      ret = AssignExpr.Operator.lShift;
    }
  | ">>="
    {
      ret = AssignExpr.Operator.rSignedShift;
    }
  | ">>>="
    {
      ret = AssignExpr.Operator.rUnsignedShift;
    }
  | "&="
    {
      ret = AssignExpr.Operator.and;
    }
  | "^="
    {
      ret = AssignExpr.Operator.xor;
    }
  | "|="
    {
      ret = AssignExpr.Operator.or;
    }
  )
  {
    return ret;
  }
}

Expression ConditionalExpression() :
{
  Expression ret;
  Expression left;
  Expression right;
}
{
  ret = ConditionalOrExpression()
  [
    "?" left = Expression() ":" right = ConditionalExpression()
    {
      ret = new ConditionalExpr(ret.getBeginLine(), ret.getBeginColumn(), ret, left, right);
    }
  ]
  {
    return ret;
  }
}

Expression ConditionalOrExpression() :
{
  Expression ret;
  Expression right;
}
{
  ret = ConditionalAndExpression()
  (
    "||" right = ConditionalAndExpression()
    {
      ret = new BinaryExpr(ret.getBeginLine(), ret.getBeginColumn(), ret, right, BinaryExpr.Operator.or);
    }
  )*
  {
    return ret;
  }
}

Expression ConditionalAndExpression() :
{
  Expression ret;
  Expression right;
}
{
  ret = InclusiveOrExpression()
  (
    "&&" right = InclusiveOrExpression()
    {
      ret = new BinaryExpr(ret.getBeginLine(), ret.getBeginColumn(), ret, right, BinaryExpr.Operator.and);
    }
  )*
  {
    return ret;
  }
}

Expression InclusiveOrExpression() :
{
  Expression ret;
  Expression right;
}
{
  ret = ExclusiveOrExpression()
  (
    "|" right = ExclusiveOrExpression()
    {
      ret = new BinaryExpr(ret.getBeginLine(), ret.getBeginColumn(), ret, right, BinaryExpr.Operator.binOr);
    }
  )*
  {
    return ret;
  }
}

Expression ExclusiveOrExpression() :
{
  Expression ret;
  Expression right;
}
{
  ret = AndExpression()
  (
    "^" right = AndExpression()
    {
      ret = new BinaryExpr(ret.getBeginLine(), ret.getBeginColumn(), ret, right, BinaryExpr.Operator.xor);
    }
  )*
  {
    return ret;
  }
}

Expression AndExpression() :
{
  Expression ret;
  Expression right;
}
{
  ret = EqualityExpression()
  (
    "&" right = EqualityExpression()
    {
      ret = new BinaryExpr(ret.getBeginLine(), ret.getBeginColumn(), ret, right, BinaryExpr.Operator.binAnd);
    }
  )*
  {
    return ret;
  }
}

Expression EqualityExpression() :
{
  Expression ret;
  Expression right;
  BinaryExpr.Operator op;
}
{
  ret = InstanceOfExpression()
  (
    (
      "=="
      {
        op = BinaryExpr.Operator.equals;
      }
    | "!="
      {
        op = BinaryExpr.Operator.notEquals;
      }
    )
    right = InstanceOfExpression()
    {
      ret = new BinaryExpr(ret.getBeginLine(), ret.getBeginColumn(), ret, right, op);
    }
  )*
  {
    return ret;
  }
}

Expression InstanceOfExpression() :
{
  Expression ret;
  Type type;
}
{
  ret = RelationalExpression()
  [
    "instanceof" type = Type()
    {
      ret = new InstanceOfExpr(ret.getBeginLine(), ret.getBeginColumn(), ret, type);
    }
  ]
  {
    return ret;
  }
}

Expression RelationalExpression() :
{
  Expression ret;
  Expression right;
  BinaryExpr.Operator op;
}
{
  ret = ShiftExpression()
  (
    (
      "<"
      {
        op = BinaryExpr.Operator.less;
      }
    | ">"
      {
        op = BinaryExpr.Operator.greater;
      }
    | "<="
      {
        op = BinaryExpr.Operator.lessEquals;
      }
    | ">="
      {
        op = BinaryExpr.Operator.greaterEquals;
      }
    )
    right = ShiftExpression()
    {
      ret = new BinaryExpr(ret.getBeginLine(), ret.getBeginColumn(), ret, right, op);
    }
  )*
  {
    return ret;
  }
}

Expression ShiftExpression() :
{
  Expression ret;
  Expression right;
  BinaryExpr.Operator op;
}
{
  ret = AdditiveExpression()
  (
    (
      "<<"
      {
        op = BinaryExpr.Operator.lShift;
      }
    | RSIGNEDSHIFT()
      {
        op = BinaryExpr.Operator.rSignedShift;
      }
    | RUNSIGNEDSHIFT()
      {
        op = BinaryExpr.Operator.rUnsignedShift;
      }
    )
    right = AdditiveExpression()
    {
      ret = new BinaryExpr(ret.getBeginLine(), ret.getBeginColumn(), ret, right, op);
    }
  )*
  {
    return ret;
  }
}

Expression AdditiveExpression() :
{
  Expression ret;
  Expression right;
  BinaryExpr.Operator op;
}
{
  ret = MultiplicativeExpression()
  (
    (
      "+"
      {
        op = BinaryExpr.Operator.plus;
      }
    | "-"
      {
        op = BinaryExpr.Operator.minus;
      }
    )
    right = MultiplicativeExpression()
    {
      ret = new BinaryExpr(ret.getBeginLine(), ret.getBeginColumn(), ret, right, op);
    }
  )*
  {
    return ret;
  }
}

Expression MultiplicativeExpression() :
{
  Expression ret;
  Expression right;
  BinaryExpr.Operator op;
}
{
  ret = UnaryExpression()
  (
    (
      "*"
      {
        op = BinaryExpr.Operator.times;
      }
    | "/"
      {
        op = BinaryExpr.Operator.divide;
      }
    | "%"
      {
        op = BinaryExpr.Operator.remainder;
      }
    )
    right = UnaryExpression()
    {
      ret = new BinaryExpr(ret.getBeginLine(), ret.getBeginColumn(), ret, right, op);
    }
  )*
  {
    return ret;
  }
}

Expression UnaryExpression() :
{
  Expression ret;
  UnaryExpr.Operator op;
  int line = 0;
  int column = 0;
}
{
  (
    (
      "+"
      {
        op = UnaryExpr.Operator.positive;
        line = token.beginLine;
        column = token.beginColumn;
      }
    | "-"
      {
        op = UnaryExpr.Operator.negative;
        line = token.beginLine;
        column = token.beginColumn;
      }
    )
    ret = UnaryExpression()
    {
      if (op == UnaryExpr.Operator.negative)
      {
        if (ret instanceof IntegerLiteralExpr && ((IntegerLiteralExpr) ret).isMinValue())
        {
          ret = new IntegerLiteralMinValueExpr(ret.getBeginLine(), ret.getBeginColumn());
        }
        else if (ret instanceof LongLiteralExpr && ((LongLiteralExpr) ret).isMinValue())
        {
          ret = new LongLiteralMinValueExpr(ret.getBeginLine(), ret.getBeginColumn());
        }
        else
        {
          ret = new UnaryExpr(line, column, ret, op);
        }
      }
      else
      {
        ret = new UnaryExpr(line, column, ret, op);
      }
    }
  | ret = PreIncrementExpression()
  | ret = PreDecrementExpression()
  | ret = UnaryExpressionNotPlusMinus()
  )
  {
    return ret;
  }
}

Expression PreIncrementExpression() :
{
  Expression ret;
  int line;
  int column;
}
{
  "++"
  {
    line = token.beginLine;
    column = token.beginColumn;
  }
  ret = PrimaryExpression()
  {
    ret = new UnaryExpr(line, column, ret, UnaryExpr.Operator.preIncrement);
  }
  {
    return ret;
  }
}

Expression PreDecrementExpression() :
{
  Expression ret;
  int line;
  int column;
}
{
  "--"
  {
    line = token.beginLine;
    column = token.beginColumn;
  }
  ret = PrimaryExpression()
  {
    ret = new UnaryExpr(line, column, ret, UnaryExpr.Operator.preDecrement);
  }
  {
    return ret;
  }
}

Expression UnaryExpressionNotPlusMinus() :
{
  Expression ret;
  UnaryExpr.Operator op;
  int line = 0;
  int column = 0;
}
{
  (
    (
      "~"
      {
        op = UnaryExpr.Operator.inverse;
        line = token.beginLine;
        column = token.beginColumn;
      }
    | "!"
      {
        op = UnaryExpr.Operator.not;
        line = token.beginLine;
        column = token.beginColumn;
      }
    )
    ret = UnaryExpression()
    {
      ret = new UnaryExpr(line, column, ret, op);
    }
  | LOOKAHEAD(CastLookahead())
    ret = CastExpression()
  | ret = PostfixExpression()
  )
  {
    return ret;
  }
}

// This production is to determine lookahead only.  The LOOKAHEAD specifications
// below are not used, but they are there just to indicate that we know about
// this.
void CastLookahead() :
{}
{
  LOOKAHEAD("(" Type() "[")
  "(" Type() "[" "]"
| "(" Type() ")" UnaryExpression()
}

Expression PostfixExpression() :
{
  Expression ret;
  UnaryExpr.Operator op;
  int line = 0;
  int column = 0;
}
{
  ret = PrimaryExpression()
  [
    LOOKAHEAD(2)
    (
      "++"
      {
        op = UnaryExpr.Operator.posIncrement;
        line = token.beginLine;
        column = token.beginColumn;
      }
    | "--"
      {
        op = UnaryExpr.Operator.posDecrement;
        line = token.beginLine;
        column = token.beginColumn;
      }
    )
    {
      ret = new UnaryExpr(line, column, ret, op);
    }
  ]
  {
    return ret;
  }
}

Expression CastExpression() :
{
  Expression ret;
  Type type;
  int line;
  int column;
}
{
  "("
  {
    line = token.beginLine;
    column = token.beginColumn;
  }
  type = Type() ")" ret = UnaryExpression()
  {
    ret = new CastExpr(line, column, type, ret);
  }
  {
    return ret;
  }
}

Expression PrimaryExpression() :
{
  Expression ret;
  Expression inner;
}
{
  ret = PrimaryPrefix()
  (
    LOOKAHEAD(2)
    ret = PrimarySuffix(ret)
  )*
  {
    return ret;
  }
}

Expression PrimaryExpressionWithoutSuperSuffix() :
{
  Expression ret;
  Expression inner;
}
{
  ret = PrimaryPrefix()
  (
    LOOKAHEAD(PrimarySuffixWithoutSuper(null))
    ret = PrimarySuffixWithoutSuper(ret)
  )*
  {
    return ret;
  }
}

Expression PrimaryPrefix() :
{
  Expression ret;
  String name;
  List typeArgs = null;
  List args = null;
  boolean hasArgs = false;
  Type type;
  int line =-1;
  int column = 0;
}
{
  (
    ret = Literal()
  | "this"
    {
      ret = new ThisExpr(token.beginLine, token.beginColumn, null);
    }
  | "super"
    {
      ret = new SuperExpr(token.beginLine, token.beginColumn, null);
    }
    "."
    [
      typeArgs = TypeArguments()
      {
        line = ((Type) typeArgs.get(0)).getBeginLine();
        column = ((Type) typeArgs.get(0)).getBeginColumn();
      }
    ]
    < IDPATTERN >
    {
      name = token.image;
      if (line == - 1)
      {
        line = token.beginLine;
        column = token.beginColumn;
      }
    }
    [
      args = Arguments()
      {
        hasArgs = true;
      }
    ]
    {
      ret = hasArgs ? new MethodCallExpr(line, column, ret, typeArgs, name, args) : new FieldAccessExpr(line, column, ret, null, name);
    }
  | "("
    {
      line = token.beginLine;
      column = token.beginColumn;
    }
    ret = Expression() ")"
    {
      ret = new EnclosedExpr(line, column, ret);
    }
  | ret = AllocationExpression(null)
  | LOOKAHEAD(ResultType() "." "class")
    type = ResultType() "." "class"
    {
      ret = new ClassExpr(type.getBeginLine(), type.getBeginColumn(), type);
    }
  | < IDPATTERN >
    {
      name = token.image;
      line = token.beginLine;
      column = token.beginColumn;
    }
    [
      args = Arguments()
      {
        hasArgs = true;
      }
    ]
    {
      ret = hasArgs ? new MethodCallExpr(line, column, null, null, name, args) : new NameExpr(line, column, name);
    }
  )
  {
    return ret;
  }
}

Expression PrimarySuffix(Expression scope) :
{
  Expression ret;
}
{
  (
    LOOKAHEAD(2)
    ret = PrimarySuffixWithoutSuper(scope)
  | "." "super"
    {
      ret = new SuperExpr(token.beginLine, token.beginColumn, scope);
    }
  )
  {
    return ret;
  }
}

Expression PrimarySuffixWithoutSuper(Expression scope) :
{
  Expression ret;
  List typeArgs = null;
  List args = null;
  boolean hasArgs = false;
  String name;
  int line =-1;
  int column = 0;
  PositionString nameStr;
}
{
  (
    LOOKAHEAD(2)
    "."
    (
      "this"
      {
        ret = new ThisExpr(token.beginLine, token.beginColumn, scope);
      }
    | ret = AllocationExpression(scope)
    | LOOKAHEAD([ TypeArguments() ] AnyIDPatternWithoutDot())

      [
        typeArgs = TypeArguments()
        {
          line = ((Type)typeArgs.get(0)).getBeginLine();
          column = ((Type) typeArgs.get(0)).getBeginColumn();
        }
      ]
      nameStr = AnyIDPatternWithoutDot()
      {
        name = nameStr.str;
        if (line == - 1)
        {
          line = nameStr.line;
          column = nameStr.column;
        }
      }
      [
        args = Arguments()
        {
          hasArgs = true;
        }
      ]
      {
        ret = hasArgs ? new MethodCallExpr(line, column, scope, typeArgs, name, args) : new FieldAccessExpr(line, column, scope, typeArgs, name);
      }
    )
  | ("["
    {
      line = token.beginLine;
      column = token.beginColumn;
    }
    ret = Expression() "]"
    {
      ret = new ArrayAccessExpr(line, column, scope, ret);
    }
    )
  )
  {
    return ret;
  }
}

Expression Literal() :
{
  Expression ret;
}
{
  (
    < INTEGER_LITERAL >
    {
      ret = new IntegerLiteralExpr(token.beginLine, token.beginColumn, token.image);
    }
  | < LONG_LITERAL >
    {
      ret = new LongLiteralExpr(token.beginLine, token.beginColumn, token.image);
    }
  | < FLOATING_POINT_LITERAL >
    {
      ret = new DoubleLiteralExpr(token.beginLine, token.beginColumn, token.image);
    }
  | < CHARACTER_LITERAL >
    {
      ret = new CharLiteralExpr(token.beginLine, token.beginColumn, token.image.substring(1, token.image.length() - 1));
    }
  | < STRING_LITERAL >
    {
      ret = new StringLiteralExpr(token.beginLine, token.beginColumn, token.image.substring(1, token.image.length() - 1));
    }
  | ret = BooleanLiteral()
  | ret = NullLiteral()
  )
  {
    return ret;
  }
}

Expression BooleanLiteral() :
{
  Expression ret;
}
{
  (
    "true"
    {
      ret = new BooleanLiteralExpr(token.beginLine, token.beginColumn, Boolean.TRUE);
    }
  | "false"
    {
      ret = new BooleanLiteralExpr(token.beginLine, token.beginColumn, Boolean.FALSE);
    }
  )
  {
    return ret;
  }
}

Expression NullLiteral() :
{}
{
  "null"
  {
    return new NullLiteralExpr(token.beginLine, token.beginColumn);
  }
}

List Arguments() :
{
  List ret = null;
}
{
  "(" [ ret = ArgumentList() ] ")"
  {
    return ret;
  }
}

List ArgumentList() :
{
  List ret = new LinkedList();
  Expression expr;
}
{
  expr = Expression()
  {
    ret.add(expr);
  }
  (
    "," expr = Expression()
    {
      ret.add(expr);
    }
  )*
  {
    return ret;
  }
}

Expression AllocationExpression(Expression scope) :
{
  Expression ret;
  Type type;
  Object [ ] arr = null;
  List typeArgs = null;
  List anonymousBody = null;
  List args;
  int line;
  int column;
}
{
  "new"
  {
    line = token.beginLine;
    column = token.beginColumn;
  }
  (
    type = PrimitiveType() arr = ArrayDimsAndInits()
    {
      if (arr [ 0 ] instanceof Integer)
      {
        ret = new ArrayCreationExpr(line, column, type, null, ((Integer) arr [ 0 ]).intValue(), (ArrayInitializerExpr) arr [ 1 ]);
      }
      else
      {
        ret = new ArrayCreationExpr(line, column, type, null, (List) arr [ 0 ], ((Integer) arr [ 1 ]).intValue());
      }
    }
  | [ typeArgs = TypeArguments() ] type = ClassOrInterfaceType()
    (
      arr = ArrayDimsAndInits()
      {
        if (arr [ 0 ] instanceof Integer)
        {
          ret = new ArrayCreationExpr(line, column, type, typeArgs, ((Integer) arr [ 0 ]).intValue(), (ArrayInitializerExpr) arr [ 1 ]);
        }
        else
        {
          ret = new ArrayCreationExpr(line, column, type, typeArgs, (List) arr [ 0 ], ((Integer) arr [ 1 ]).intValue());
        }
      }
    )
  )
  {
    return ret;
  }
}

/*
 * The third LOOKAHEAD specification below is to parse to PrimarySuffix
 * if there is an expression between the "[...]".
 */
Object [ ] ArrayDimsAndInits() :
{
  Object [ ] ret = new Object [ 2 ];
  Expression expr;
  List inits = null;
  int i = 0;
}
{
  (
    LOOKAHEAD(2)
    (
      LOOKAHEAD(2)
      "[" expr = Expression()
      {
        inits = add(inits, expr);
      }
      "]"
    )+
    (
      LOOKAHEAD(2)
      "[" "]"
      {
        i++;
      }
    )*
    {
      ret [ 0 ] = inits;
      ret [ 1 ] = new Integer(i);
    }
  | ("[" "]"
    {
      i++;
    }
    )+ expr = ArrayInitializer()
    {
      ret [ 0 ] = new Integer(i);
      ret [ 1 ] = expr;
    }
  )
  {
    return ret;
  }
}

/* We use productions to match >>>, >> and > so that we can keep the
 * type declaration syntax with generics clean
 */
void RUNSIGNEDSHIFT():
{}
{
  ( LOOKAHEAD({ getToken(1).kind == GT &&
                (getToken(1)).realKind == RUNSIGNEDSHIFT} )
   ">" ">" ">"
  )
}

void RSIGNEDSHIFT():
{}
{
  ( LOOKAHEAD({ getToken(1).kind == GT &&
                (getToken(1)).realKind == RSIGNEDSHIFT} )
  ">" ">"
  )
}
